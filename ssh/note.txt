一、ssh代理
	代理模式，是为了增强目标类（目标对象）
	1.静态代理
		1).接口类
		public interface IService{
			Method1();
			Method2();
		}
		
		2).目标类
		public ServiceImpl implements IService{
			Method1(){
			
			}
			
			Method2(){
			
			}
		}
		
		3).静态代理类
		public ServiceProxy implements IService{
			IService target = null;
			public ServiceProxy(IService target){
				this.target = target;
			}
			
			Method1(){
				target.Method1();
				....
			}
			
			Method2(){
				target.Method2();
				....
			}
		}
	2.jdk动态代理
		不用自己写代理类，直接生成和接口对应的代理对象。因此动态代理在运行的时候生成。
		Proxy.newProxyInstance(
			target.getClass().getClassLoader(),	//目标类的类加载器
			target.getClass().getInterfaces(),	//目标类实现的接口
			new InvocationHandler(){			//代理类实现的东西
				@Override
				public Object invoke(Object proxy, Method method,
							Object[] args) throws Throwable {
						if ("Method1".equals(method.getName())) {
							....	//方法1的代理
						}else if("Method2".equals(method.getName())){
							...		//方法2的代理
						}
						return null;
					}
			}
		);
		
	3.cglib动态代理
		对于无接口的类，要为其创建动态代理，就要用cglib。cglib代理原理是生成目标类的子类。
		而子类是增强过的，子类对象就是代理对象。也就是说目标类应该可以被继承，不能是final。
		CGlib是一个开源项目，是代码生成类库。可以在运行期扩展和增强java类。
		Hibernate用它来实现持久对象的字节码动态生成。
		Spring用它来实现AOP编程。
		1).增强器实现
			Enhancer enhancer = new Enhancer();
			enhancer.setSuperclass(SomeService.class);	//指定增强的目标类
			enhancer.setCallback(new callBackObj());	//指定回调接口对象
		2).回调实现
			class callBack extends Callback{
				public Object intercept(Object obj, Method method, Object[] args,
					MethodProxy arg3) throws Throwable {
				
					Object result = method.invoke(target, args);
					
					if ("doSecond".equals(method.getName())) {
						result = ((String) result).toUpperCase();
					}
					
					return result;
				}
			}
二、JUnit测试
	有3种常用标注:
	@Before	: SetUp()	, 这个是执行测试的环境搭建代码。
	@After	: tearDown(), 这个是资源释放等代码。
	@Test	: fun()		, 普通的测试方法
	
三、Log4j
	Log for java，是java语言日志记录工具。
	1.日志级别，以下由高到底：
		fatal(致命的)
		error
		warn
		info
		debug
		trace(堆栈)
	2.log4j
		log4j使用properties文件来配置输出。
		log4j使用xml文件来配置输出。
		Logger logger = LogManager.getLogger(MyTest.class);	//log4j2的形式
		logger.fatal("fatal message");	选择错误级别，输出错误信息
		logger.error("error messages");
		logger.warn("info messages");
		logger.info("info messages");
		logger.debug("debug messages");
		logger.trace("trace messages");
	3.slf4j
		log4j的使用，是为了代码debug中输出较多的提示。
		为了使框架具有一般性，框架一般不指定具体的日志实现技术，而是使用一个日志框架slf4j，这个框架提供了一个接口。
		程序员自己来选择如何实现这些接口。（如可以用jdk日志，log4j日志，log4j2日志）
		