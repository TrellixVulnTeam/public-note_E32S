
	static int[][] costlinker = new int[][]{
		{ 0,  2, 10,  5,  3, -1}, 
		{-1,  0, 12, -1, -1, 10}, 
		{-1, -1,  0, -1,  7, -1},
		{ 2, -1, -1,  0,  2, -1}, 
		{ 4, -1, -1,  1,  0, -1}, 
		{ 3, -1,  1, -1,  2,  0}};
	static boolean[] flag = new boolean[]{false, false, false, false, true, false};
	
	static{
		for(int i=0; i<costlinker.length; i++){
			for(int j=0; j<costlinker[i].length; j++){
				if(costlinker[i][j] == -1){
					costlinker[i][j] = 1000;
				}
			}
		}
	}
	
	public static void main(String[] args) throws Exception {
		Scanner input = new Scanner(System.in);
		int t = input.nextInt()-1;
		int w = input.nextInt()-1;
		input.close();
		
		if(w > 0){
			for(int i=0; i<6; i++){
				costlinker[w][i] = 1000;
				costlinker[i][w] = 1000;
			}	
		}
		
		List<Integer> path = new ArrayList<>();
		if(t != 4){
			int cost = dfs(4, t, path);
			if(path.size() != 0){
				StringBuilder sb = new StringBuilder();
				sb.append(cost+"\n[");
				for(Integer point : path){
					sb.append((point+1)+", ");
				}
				sb.deleteCharAt(sb.length()-1);
				sb.deleteCharAt(sb.length()-1);
				sb.append("]");
				System.out.println(sb.toString());
			}else{
				System.out.println("1000\n[]");
			}
		}else{
			System.out.println("1000\n[]");
		}
		
	}
	
	static int dfs2(int o, int t, List<Integer> path){
		int mincost = 1000;
		List<Integer> tmppath = null;
		if(o == t){return 0;}
		
		for(int i=0; i<6; i++){
			if(flag[i]==true){continue;}
			flag[i]=true;
			path.add(i);
			int cost = costlinker[o][i] + dfs2(i, t, path);
			path.remove(i);
			flag[i]=false;
			if(cost < mincost){
				mincost = cost;
				tmppath = path;
			}
		}
		
		if(tmppath != null){
			path.addAll(tmppath);
		}
		return mincost;
	}
	
	static int dfs(int o, int t, List<Integer> path){
		int mincost = 1000;
		path.add(o);
		if(o == t){return 0;}
		
		List<Integer> tmppath = new ArrayList<>();
		for(int i=0; i<6; i++){
			if(i!=o && costlinker[o][i] != 1000 && flag[i] == false){
				List<Integer> bufpath = new ArrayList<>();
				flag[i] = true;
				int cost = costlinker[o][i] + dfs(i, t, bufpath);
				flag[i] = false;
				if(cost < mincost){
					mincost = cost;
					tmppath = bufpath;
				}
			}
		}
		path.addAll(tmppath);
		return mincost;
	}
	
	/*
	static int choseMinIndex(int[] array){
		int min=1000;
		int minindex=-1;
		for(int i=0; i<array.length; i++){
			if(array[i]<min && array[i] != 0){
				min = array[i];
				minindex = i;
			}
		}
		return minindex;
	}
	
	static void dijkstra(int o, int t, List<Integer> path){
		int[] mincost = new int[]{1000, 1000, 1000, 1000, 1000, 1000};
		int[] pre = new int[6];
		for(int i=0; i<6; i++){
			if(i==o){continue;}
			mincost[i] = costlinker[o][i];
		}
		
		while(true){
			int index = choseMinIndex(mincost);
			if(index == t){
				;
			}else{
				int cost = mincost[index];
				for(int i=0; i<6; i++){
					if(i==o){continue;}
					if(cost+costlinker[index][i] < mincost[i]){
						mincost[i] = costlinker[index][i]+cost;
						pre[i]=index;
					}
				}
			}
		}
	}
	*/