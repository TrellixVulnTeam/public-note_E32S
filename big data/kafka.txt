一 简介
    分布式发布-订阅消息系统，最初由linkedIn公司开发，由scala语言编写，已经是Apache项目的一部分。
    主要用于处理活跃的【流式数据】。
    特点：
        1).每秒可以生成25万消息(50MB)，每秒处理55万消息(110MB)。
        2).可以进行持久化操作，将消息持久化到磁盘中。通过将数据持久化到磁盘以及副本机制防止数据丢失。
        3).分布式系统，易于扩展。无需停机就可以扩展机器。
    基本架构：消费者订阅了topic，然后从topic中获取消息，消息来自生产者。生产者发布一个消息到kafka的要给topic，会被消费者监听到。这个主题由kafkaServer角色的broker提供。
    消息队列分类：
        1).点对点(传统)
            生产者生产消息放到queue中，消费者从queue中取出消息。queue可以有多个消费者，但是一条消息只有【一个】消费者会消费。
        2).发布订阅(kafka)
            生产者生产消息发布到topic中，同时有多个消费者订阅该topic消费该消息。消息会被【所有】消费者消费。
二 部署架构
    1.Producer，生产者，通过push将数据放到Broker中。
    2.Broker，KafkaServer
        是无状态的，只负责储存，本身如果挂了数据就丢失了。
        需要强调的是，没有做备份处理，即只保存在本地磁盘，不会保存在别处，因此宕机了那些数据是拿不出来的。采用主从结构可以维持数据传输的，但是没有主从共享数据，因此broker挂掉了数据还是会丢失。
    3.Consumer，通过pull将Broker中的数据获取，所有的状态在消费者保存，比如说上次取得消息的id号。
    4.Zookeeper，当Broker中有了新数据，通知Consumer去pull数据，协调了Broker和Consumer的关系。
三 基本概念
    1.Topic，kafka处理的消息源分类。
    2.Partition，Topic物理上的分组，一个topic可以包含partition中。每个partition是一个有序队列。partition中的每条消息都会分配一个有序的id。
    3.Message，消息，是通信的基本单位。
    4.Consumer，消费者，普通的消费者之间共享消息。每个consumer完成全部消费。
    5.Consumer Group，Group将消息平分给下面的Consumer。每个consumer完成消费的一部分，相当于并行处理了。