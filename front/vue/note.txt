一、概述
    通过<script src="https://unpkg.com/vue"></script>来引入vue的代码。这样就能支持Vue的特性。下面介绍最简单的，也是最核心的使用方式。
    1).声明式渲染
        var app = new Vue({         //实例化Vue实例
            el : '#app',            //将该vue实例和对应的标签绑定在一起
            data : {
                message : "hello world"         // 可以通过Vue实例(在这里是app变量)直接访问message。每当data变化，都会触发在绑定标签的显示刷新。
            }
        });
        data中的数据只能在html标签中的数据中被{{message}}的形式所引用。要将data中的数据和标签的属性绑定在一起可以通过：v-bind:<attr>="<data-property>"
        例如<span v-bind:title="message">
        由于data中的属性可以直接被Vue实例代理，因此可以直接通过app.message的方式进行修改。
        通过Vue构造器传入的对象的属性 将会成为Vue实例 的私有属性。
    2).条件与循环
        a).v-if
            在标签上用v-if可以指定该标签是否进行显示。
            <p v-if="seen">hello world</p>
            seen是Vue实例的属性，或是传入Vue构造器的对象的data的message属性。
        b).v-for
            在标签上使用v-for可以绑定数组的数据来进行渲染
            <li v-for="<item> in <array>"> {{item...}} </li>
            这里将会渲染出多个<li></li>标签，可以通过{{item}}的方式拿到数组中的元素，若数组中的元素是对象可以通过{{item.val}}的方式进一步引用。
            <array>应该是一个数组。
    3).人机交互
        可以通过v-on来绑定一个事件监听器。
        <button v-on:<event>="<methodName>">button</button>
        当标签发生了对应的事件，将会触发实例的methodName方法。
        在构造Vue实例的时候，methodName应该放在methods属性中，如：
        var app = new Vue({
            el : "#xx",
            data : {

            },
            methods : {
                methodName : function(){
                    ...
                }
            }
        });
    4).组件化应用构建
        这是Vue里的另一个重要概念，几乎任意类型的应用界面都可以抽象为一个组件树。
        Vue中，组件本质上是一个拥有预定义选项的Vue实例。
        Vue.component('todo-item',{
            template : '<li>hello world</li>'
        });
        这样就可以使用<todo-item></todo-item>标签了。
二、Vue实例
    1.构造器
        每个Vue.js应用都是通过构造函数Vue来创建一个Vue根实例。
        var vm = new Vue({});
        在实例化Vue时，需要传入一个对象，该对象被称为【选项对象】，这个对象包含了数据，模板，挂载元素，方法，声明周期钩子函数等选项。其实就是一个配置。
        可以扩展Vue构造器，生成新的构造器 Var NewComponent = Vue.extend({}); 以便构造可复用的组件构造器。Vue.js的组件，其实都是被扩展的Vue实例。
    2.属性与方法
        每个Vue实例，都会代理【选项对象】的data属性中的所有属性。
        var data = {a : 1;};
        var vm = new Vue({data:data});
        vm.a === data.a;        // true
        注意，只有这些被【代理】的属性是【响应】的，也就是说其值的任何改变都会触发视图的重新渲染。a的其他非代理属性，不是可响应的。
        Vue实例将会暴露一些选项对象中【某些】实例属性与方法。这些属性与方法都是以$开头，以便进行区分。
        var vm = new Vue({
            el : ...,
            data : ...,
        });
        可以通过vm.$el和vm.$data来选定。
    3.生命周期
        每个Vue实例都会经过一系列的初始化过程。例如，实例需要配置数据观察、编译模板、挂载实例到DOM，数据变化是更新DOM。
        实例在这个过程中，会调用生命周期钩子函数。
        var vm = new Vue({
            created : function(){       //在实例创建之后将会被调用
                // 这里面的this【指向vue实例】，而不是这个选项对象。
            }
        });
        也有mounted、updated、destoryed的钩子函数。钩子函数中，this指向vue实例。
三、模板语法
    允许开发者声明式地将DOM绑定至底层Vue实例的数据。
    在底层实现上，Vue能够将模板编译成虚拟DOM渲染函数，结合响应系统，在状态改变时，Vue计算重新渲染组件的最小代价并应用到DOM上。
    也可以不用写模板，而是直接写渲染函数，使用JSX语法。
    1.文本
        采用双大括号的方式，指定标签中的数据进行文本插值。
        {{msg}} 绑定到msg上，当msg发生了改变，插值出的内容会立即更新。
        通过v-once只会进行一次插值，当数据改变后内容不会更新。
        通过v-html="rawHtml"，会将双大括号解释为纯HTML内容，不会进行插值。
    2.属性
        双大括号只能用在标签的值中，不能用在标签的属性上。
        将标签的属性进行数据绑定，是通过v-bind实现的：v-bind:<attr>="<content>"
    3.指令
        是带有v-前缀的特殊属性，指令的属性值预期是单个的Javascript表达式。
        指令的职责是当表达式的值改变时，响应的作用于DOM。
        1).参数
            指令是可以带参数的，在指令的后面通过冒号来指定参数，如：
                v-bind:<attr-param>="value"
                v-on:<event-param>="value"
        2).修饰符
            指令后面也可以带修饰符，通过小数点来指明修饰符。
        3).过滤器
            过滤器可以用在双大括号插值和v-bind表达式中，添加在js表达式的尾部，过滤器也能串联。
            {{message | filter1 | filter2 | filter3}}
            过滤器函数可以接收表达式的值作为第一个参数。
            new Vue({
                filters : {                 // 过滤器属性
                    function (value) {      // value是之前表达式的结果或是过滤器链前面传下来的的值
                        return ...;         // return是下一个过滤器的value，或是插值的最后结果。
                    }
                }
            });
            若需要对数据进行复杂的转换，应该采用【计算属性】，而不是过滤器。
        4).缩写
            v-bind:<attr>="value" 缩写为 :<attr>="value"
            v-on:<event>="value"  缩写为 @<event>="value"
四、计算属性
    模板中不应该放入过多的逻辑，这样会让模板太重，并且难以维护，可读性也差。并且对于重复的逻辑也不具有好的可重用性。
    计算属性和普通属性的使用是相同的。
    标签依赖于计算属性，而计算属性是依赖于普通属性的。
    Vue可以检测计算属性依赖了哪些普通属性，当这些普通属性发生变化是，会自动执行计算属性，并自动对依赖计算属性的标签进行渲染。
    {{normal-property}}
    {{computed-property}}

    var vm = new Vue({
        data : {
            normal-property : ...;
        },
        computed : {
            computed-property : function(){
                normal-property
            }
        }
    });
    1.vs method
        对于method中定义的方法，采用相同的方式，其实也是可以进行渲染的。
        {{normal-property}}
        {{methd-property}}

        var vm = new Vue({
            data : {
                normal-property : ...;
            },
            methods : {
                method-property : function(){
                    normal-property
                }
            }
        });
        Vue也会计算依赖，当所依赖的普通属性变化时，method也会自动执行，也会对DOM进行渲染。
        但是计算属性的方法，对返回结果是【有缓存】的。只有当所以来的属性发生变化的时候，计算属性的方法才会执行，其他时候执行都会返回之前计算的结果。
        因为vm.computed-property是被修改过的，并不是单纯的选项对象中的方法，Vue会在代理的方法中引入缓存机制。
        method是没有加缓存机制的。
        当一个计算属性A依赖于另一个计算属性B和一个普通属性时，当普通属性发生变化在计算A时，计算B将会立即返回，这样效率很高。
    2.vs watch
        watch可以监听data的变化，可以实现和计算函数相同的效果，但是计算函数通常会更简洁。
    3.计算函数的setter
        计算函数默认只有getter，但是也能配置setter
        computed : {
            property : {
                get : function(){...}
                set : function(newValue){...}
            }
        }
        调用vm.property = ...; 将会调用setter。
    4.通过watch替代
        watch更通用，更灵活，可以实现某些计算函数无法实现的效果。比如一包操作，操作频率限制等等。
五、Class与Style绑定
    Class和Style都是标签的属性，都可以用v-bind来进行控制，但是会涉及到字符串拼接，容易出错。Vue对此进行了强化。
    1.Class绑定
        1).对象绑定
            可以给class传一个对象，该对象的属性就是该标签所拥有的class。
            <div v-bind:class="{ <class-name>:isExist }"></div>
            isExist在data中进行声明，并且为true时该类存在，为false该类不存在。
            Vue({
                data:{
                    isExist : true
                }
            });
            也可以直接传入一个对象
            <div v-bind:class="classObj"></div>
            new Vue(function(
                data : {
                    classObj : {
                        <class-name>:true
                    }
                }
            ));
            也可以传入一个计算属性，当然该计算属性的getter应当返回一个object。
        2).数组绑定
            也可以通过数组来传入支持的类
            <div v-bind:class="[class1, class2, ...]"></div>
            data : {
                class1 : true,
                class2 : false,
                ...
            }
    2.Style绑定
        和class一样也有数组绑定和对象绑定两种方式。
        <div v-bind:style="{ <css-propert>:<val>,... }"></div>
        <val>和data中的属性相关联。
        <div v-bind:style="styleObj"></div>
        styleObj是data中的同名对象。
        数组方式和类的数组绑定相同。
六、条件渲染
    条件渲染，用于控制内容是否进行显示与删除.
    当v-if与v-for一起使用时，v-for具有比v-if更高的优先级。
    1.v-if属性
        <div v-if="ok">...</div>
        <div v-else-if="h===3"></div>
        <div v-else>...</div>
        ok是data的属性，若为true则渲染该标签，否则删除该标签。
        若在后面紧贴的标签上添加了v-else属性，则会进行关联判断进行渲染。
        v-else需要紧跟在v-else-if或v-if标签后面，否则无法被识别。
        v-else-if需要紧跟在v-if标签后面，否则无法被识别。
    2.template
        v-if作用于单个标签，若要进行多个标签的控制则需要通过<template>
        <template>
        </template>
    3.通过key进行管理可复用元素
        Vue会尽可能高效复用元素。当标签的key相同的时候，会有复用的情况。
            <input v-if="loginType === 'username'" placeholder="Enter your username">
            <input v-else placeholder="Enter your email address">
        不管loginType如何变化，input都共用一个。
        可以通过key属性来表明元素的不同:
            <input v-if="loginType === 'username'" placeholder="Enter your username" key="username-input">
            <input v-else placeholder="Enter your email address" key="email-input">
    4.v-show
        v-show也可以控制元素的显示与否，但v-show控制的元素都始终在DOM树。也就是说v-show只是控制display属性，并不会实际的删除或添加。
        v-show总是会渲染，但是display属性受控。初始渲染开销比v-if大，但切换开销小。
        v-if  若为false，初始并不会渲染。但是其切换开销较大。
七、列表渲染
	1.v-for
		语法有多种变形：
			item in items，items是源数组，item是元素迭代的别名。
			(item, idx) in items，idx是当前项的索引。
			value in object，object是源对象，value是对象中的值(kv中的v)。
			(value, key, idx) in object,  key是kv中的k，idx是索引。
			n for <number>， <number>是一个数字，n是从0到该数字的值。
			源对象和源数组均来自于Vue实例：
			new Vue({
				data : {
					items : [],
					object: {},
				}
			});
			v-for语法是作用于标签的，可以将标签进行复制，并且复制的标签可以访问数组中的内容。
			<li v-for="item in items">{{item}}</li>
			当有多个标签需要进行循环时，可以使用template + v-for的方式。
	2.v-for与v-if
		当v-for与v-if出现在同一标签上时，v-for的优先级更高。也就是说v-if将会重复作用于每个v-for循环标签中。
	3.数组更新检测
		Vue有一组变异方法，这组方法将会是数组改动，并被Vue观测到，且更新渲染。
		push()    unshift()   reverse()
		pop()     splice()
		shift()   sort()
		非变异方法，并不会触发数组的改动，而是生成新的数组。当用新数组替换旧数组时，也会触发视图更新渲染。
		1).当利用索引进行值的设置时，也不会更新渲染。需要依赖Vue.set(vueObj.items, idx, newValue); 来设置新值。
		2).直接设置数组的length元素时，也不能进行渲染。
	4.过滤
		当要进行循环的显示根据值进行过滤时，可以依赖计算属性。	
		computed: {
			evenNumbers: function () {
				return this.numbers.filter(function (number) {
				return number % 2 === 0
			})
		}
八、事件处理器
	可以用v-on指令监听DOM事件来触发js。
	
九、表单控件绑定

十、组件

十一、深入响应式原理

十二、过渡效果

十三、过渡状态

十四、Render函数