一、概述
二、基础
    js中，分号是可以省略的，但是建议保留分号。
    1.js的类型：
        可以通过typeof(<val>)来判断一个值的类型
        - 原始类型
            数字(number)
            字符串(string)
            布尔(boolean)
            未定义(undefine)
        - 对象类型
            普通对象，是kv的无序集合。(object)
            数组(object)
            函数(function)
    2.js的计算结果
        Infinity和NaN表示结果为 无穷大 和 非数值(not-a-number)。
        1/0==infiinity
        0/0==NaN
    3.日期和时间
        js语言核心包括Date()构造函数，用来创建表示日期和时间的对象
        var now = new Date();   //返回记录了当前日期和时间的对象
        var then = new Date(year, month, day);                       //返回指定年月日的时间对象
        var then2 = new Date(year, month, day, hour, min, second);   //返回指定年月日时分秒的时间对象
        var e = now - then;     //返回两个时间对象所差的毫秒数
        now.getFullYear();
        now.getMonth();
        ...
    4.布尔值
        undefine，null，0，-0，NaN，""都会强制转换为false，其他值转换为true。
    5.null和undefine
        undefine是undefine类型的唯一值，null是类型的值。
        这两个值都用来表明缺少值，但是null表明人为的空缺，undefine更能表明结构上的空缺。
        若查询的对象属性不存在，函数参数没传，函数没有返回值，数组中不存在的元素，声明但是未赋值 则返回undefine。
        由于null和undefine都代表缺少值，所以null==undefine返回的是true，若需要强制区分则需要采用===或是!==比较。
        null和undefine都不包含任何属性和方法，使用"."和"[]"来存取这两个值的成员都会产生一个类型错误。
    6.this对象
        js解释器启动时，将创建一个新的this对象，该对象就是this，并给它一组定义的初始值，在js的任何地方都可以直接使用这些初始值：
            全局属性：
            全局函数：
            构造函数：
            全局对象：
        在客户端js中，window充当this对象，它可以代替this，不仅如此window也有针对浏览器和客户端js定义了少部分其他值。
        相当于在js开启的时候有var window = this;
    7.包装对象
        这很类似于Java的Wrapper类。
        js的string，number，boolean都是普通对象，不具备方法，但是却可以使用方法，是因为在使用方法的时候js会对它进行包装。
        "hello".split(",") 等价于 new String("hello").split(",");这种临时创建出来的对象被称为包装对象。
        也可以显示的创建包装对象。
        包装对象和原本的值之间可以通过==来认为其相等，但是===会认为其不等。
    8.类型转换
        隐式转换：
        显式转换：
            通过Type(value)，可以将值强转为Tyle类型的值。
            特别的，字符串转为数值：
                Number("123");      //Number可以解析整数和浮点数，但是仅仅非十进制型不可解析
                parseInt("..");
                parseFloat("..");   //parse支持其他进制的数值解析
            数值转为字符串：
                String(123);
    9.==和===
        ==和===都是值比较，但是===会在值比较前有个类型【检验】，==会在比较前有个类型【转换】。
        ==会将不同类型的值转换为相同类型的进行比较，
        ===会在类型不同时直接返回false。
    10.变量声明
        var name;   用以声明一个变量，若变量为赋值，则返回undefine。
        js是动态类型，因此不用指明变量类型。
        需要注意的是，js的var声明作用于【不是】块级作用域，而是函数级的作用。
        也就是说在函数内部声明的变量，在函数内的任何地方都可以使用。
        也因此：{var b=3;}这样的一个声明，会在退出块后仍然可用。
        本质上js是将所有声明放到了函数初始位置，在原本var的地方进行赋初始值(如果有赋初始值)罢了。
        需要注意的是：
            函数外的变量声明(即全局变量声明)，本质上是给this添加了一个属性。
            若不加var的直接赋值，其实也是给this添加一个属性。
            但是var声明的属性，不可删除。
            函数内使用的对象声明，不会给this添加，当然函数内的变量本质上也是某个对象的属性，这个对象叫做Call Object，是函数内在机制存在的对象，对程序员不可见。
        对于同名变量，采用就近原则。
        作用域链：
            这非常类似于scheme、lisp等函数式编程语言。
            js的函数有个这样的特性：每个函数在触发运行的时候，会首先在内存开启一个作用域链，作用域链中保存了函数在运行时可以找到的变量。
            当函数运行时，使用x这一变量时，会先在作用域链中找第一个对象的属性，若存在则使用，否则找链中的第二个对象的属性...若没有链中没有一个对象有该属性，则抛出异常。

三、表达式
    1.对象和数组的初始化表达式
        1).数组
            通过[]定义数组，可嵌套。
            [];                             //空数组
            [1,2,3];                        //...
            [[1,2,3],[4,5,6],[7,8,9]];      //嵌套数组
            [1,,,,2];                       //中间通过undefine填充
        2).对象
            通过{}定义对象，可嵌套。通过<key> : <val>的形式来声明kv对。
            { <property-1> : <val-1>,
              <property-2> : <val-2>,
              <property-3> : {
                  ...
              }};
              注意在声明的时候，可以用'<property>'，也可以不加引号。
              obj["<property-1>"];
              obj.<property-1>;
              都可以访问特定属性。需要注意的是，若<property>为纯数字，则必须采用obj['']的形式来访问。
    3.函数定义表达式
        var fun = function(){
            ...
        };
        fun();
        因为函数其实是一个类型为Function的值，因此可以进行简单的赋值给变量。
    4.属性访问表达式
        obj.key;
        array[index];
    5.对象创建表达式
        通过new可以创建一个对象，并调用其构造函数。
        new Date();
        若无参数需要传递，则可以省略括号：
        new Date;
    6.表达式计算
        eval函数可以对将字符串进行求值介绍。
        当字符串是的内容表达式或语句的时候，便可以当做一般代码编译并运行，【编译错误会抛错】，此时不会执行，因此这时候会感觉像是编译性语言。
        当时字符串内容为表达式时，将会直接返回值。
    7.typeof运算符
        返回操作数的类型。
    8.  delete运算符
        用来删除对象属性或是数组元素。
        需要注意的是，数组元素被删除，其长度仍然不变，其被删除的元素用undefine代替。
        var 语句声明的变量不可删除，function定义的函数和函数参数也不可删除。
四、语句
    1.声明语句a
        var <name>;
    2.function
        函数定义
        var functionName = function(arg...){
            ...
        }
        也可以
        function functionName(arg...){
            ...
        }
    3.for-in
        这是对象/数组的遍历手段
        for(var p in o){
            ...
        }
        当o为对象时，p是对象的key，且无序。
        当o为数组时，p是数组的元素。
        当o为null/undefine，会自动跳过。
        需要和足以的是，for-in不会遍历对象的所有属性，只有【可枚举】的属性才能遍历到。比如一些内置方法toString()，和内置属性是不能遍历到的。
    4.with语句
        with(o){
            ...
        }
        with语句将o添加到作用域链的头部，并在语句块执行完后将作用域恢复到原始状态。
        这样可以避免对一个对象的都次前缀访问。
        比如:
            a.x=1;
            a.y=2;
            a.z=3;
        可以有:
            with(a){
                x=1;
                y=2;
                z=3;
            }
        建议少用。
    5.debugger语句
        程序运行到debugger时将会暂停，有助于程序调试。
五、对象
    js中的对象，本质上是字符串到值的映射，并且是无序的。
    因此js对象本质上就是一个HashMap。
    js的对象可以从原型对象中继承属性，比如以此种方式继承方法。
    1.js对象的基本概念
        对象的一个属性包含属性名和值，对象中不能存在两个同名的属性。
        1).属性特征
            - 可写，表明是否可以设置该属性的值。
            - 可枚举，表明是否可以通过for-in遍历。
            - 可配置，表明是否可以删除或修改修改该属性。
            通过代码给对象创建的属性，默认都具备这3个特征。
        2).对象特征
            - 原型，指向另一个对象，本对象的属性继承自原型对象。
            - 类，是一个标识对象类型的字符串。
            - 扩展标记，指明是否可以向该对象添加新属性。
        3).对象分类
            - 内置对象，由ECMAScript规范定义的对象或类，如数组，函数，日期和正则表达式。
            - 宿主对象，由Js的宿主环境定义的，如表示网页结构的HTMLElement对象。
            - 自定义对象，运行中的js创建的对象。
        - 自由属性，直接在对象中定义ide属性。
        - 继承属性，对象原型中定义的属性。
    2.创建对象
        可以通过new、Object.create()、{}均可以创建对象。
        1).对象直接量
            即{...}形式创建对象。这样没有办法指定对象的原型。
        2).通过new创建
            new后跟一个函数调用，这个函数称为构造函数，可以用来构造一种类型的对象。
            var o = new Object();   // 创建一个空对象，等价于{}
            var a = new Array();    // 创建一个数组对象，等价于[]
        3).通过Object.create()创建
            var o = Object.create([prototype, otherProperty);
            其中prototype是o的原型，otherproperty是对o属性的进一步描述。
        3).原型
            js除了null外，都和另外一个对象关联，这个对象就是原型。
                - 通过对象直接量({...}的方式)创建的对象，都有同一个原型，即Object.prototype。
                - 通过new创建的对象，原型就是构造函数的prototype属性。
            只有Object.prototype没有原型，因为这就是所有对象的最终的原型。
            当获取o.x时，若o的自由属性中没有，则会去原型的属性中寻找x
            当设置o.x的值时，会直接在o中创建x，并不会修改原型的值。
            var o = {x:1, y:2};
            fun(Object.create(o));          通过这样的机制，可以避免在fun中对o的意外修改。