一、概述
二、基础
    js中，分号是可以省略的，但是建议保留分号。
    1.js的类型：
        可以通过typeof(<val>)来判断一个值的类型
        - 原始类型
            数字(number)
            字符串(string)
            布尔(boolean)
            未定义(undefine)
        - 对象类型
            普通对象，是kv的无序集合。(object)
            数组(object)
            函数(function)
    2.js的计算结果
        Infinity和NaN表示结果为 无穷大 和 非数值(not-a-number)。
        1/0==infiinity
        0/0==NaN
    3.日期和时间
        js语言核心包括Date()构造函数，用来创建表示日期和时间的对象
        var now = new Date();   //返回记录了当前日期和时间的对象
        var then = new Date(year, month, day);                       //返回指定年月日的时间对象
        var then2 = new Date(year, month, day, hour, min, second);   //返回指定年月日时分秒的时间对象
        var e = now - then;     //返回两个时间对象所差的毫秒数
        now.getFullYear();
        now.getMonth();
        ...
    4.布尔值
        undefine，null，0，-0，NaN，""都会强制转换为false，其他值转换为true。
    5.null和undefine
        undefine是undefine类型的唯一值，null是类型的值。
        这两个值都用来表明缺少值，但是null表明人为的空缺，undefine更能表明结构上的空缺。
        若查询的对象属性不存在，函数参数没传，函数没有返回值，数组中不存在的元素，声明但是未赋值 则返回undefine。
        由于null和undefine都代表缺少值，所以null==undefine返回的是true，若需要强制区分则需要采用===或是!==比较。
        null和undefine都不包含任何属性和方法，使用"."和"[]"来存取这两个值的成员都会产生一个类型错误。
    6.this对象
        js解释器启动时，将创建一个新的this对象，该对象就是this，并给它一组定义的初始值，在js的任何地方都可以直接使用这些初始值：
            全局属性：
            全局函数：
            构造函数：
            全局对象：
        在客户端js中，window充当this对象，它可以代替this，不仅如此window也有针对浏览器和客户端js定义了少部分其他值。
        相当于在js开启的时候有var window = this;
    7.包装对象
        这很类似于Java的Wrapper类。
        js的string，number，boolean都是普通对象，不具备方法，但是却可以使用方法，是因为在使用方法的时候js会对它进行包装。
        "hello".split(",") 等价于 new String("hello").split(",");这种临时创建出来的对象被称为包装对象。
        也可以显示的创建包装对象。
        包装对象和原本的值之间可以通过==来认为其相等，但是===会认为其不等。
    8.类型转换
        隐式转换：
        显式转换：
            通过Type(value)，可以将值强转为Tyle类型的值。
            特别的，字符串转为数值：
                Number("123");      //Number可以解析整数和浮点数，但是仅仅非十进制型不可解析
                parseInt("..");
                parseFloat("..");   //parse支持其他进制的数值解析
            数值转为字符串：
                String(123);
    9.==和===
        ==和===都是值比较，但是===会在值比较前有个类型【检验】，==会在比较前有个类型【转换】。
        ==会将不同类型的值转换为相同类型的进行比较，
        ===会在类型不同时直接返回false。
    10.变量声明
        var name;   用以声明一个变量，若变量为赋值，则返回undefine。
        js是动态类型，因此不用指明变量类型。
        需要注意的是，js的var声明作用于【不是】块级作用域，而是函数级的作用。
        也就是说在函数内部声明的变量，在函数内的任何地方都可以使用。
        也因此：{var b=3;}这样的一个声明，会在退出块后仍然可用。
        本质上js是将所有声明放到了函数初始位置，在原本var的地方进行赋初始值(如果有赋初始值)罢了。
        需要注意的是：
            函数外的变量声明(即全局变量声明)，本质上是给this添加了一个属性。
            若不加var的直接赋值，其实也是给this添加一个属性。
            但是var声明的属性，不可删除。
            函数内使用的对象声明，不会给this添加，当然函数内的变量本质上也是某个对象的属性，这个对象叫做Call Object，是函数内在机制存在的对象，对程序员不可见。
        对于同名变量，采用就近原则。
        作用域链：
            这非常类似于scheme、lisp等函数式编程语言。
            js的函数有个这样的特性：每个函数在定义时，便会有一个作用域链，当该函数触发时会新建一个对象放在作用域链的首部，函数中的变量将会绑定在这个新对象中。
			函数定义时，其作用域链中就是所定义环境时采用的作用域链。
            当函数运行时，使用x这一变量时，会先在作用域链中找第一个对象的属性，若存在则使用，否则找链中的第二个对象的属性...若没有链中没有一个对象有该属性，则抛出异常。
			这其实很类似于sicp里面的作图法，每个函数都有两个圆圈，第一个圆圈是函数体，第二个圆圈是指向其作用域链。当方法执行时，将会产生一个新的环境，新环境的指向和函数定义时的第二个圆圈相同，这其实就是作用域链。

三、表达式
    1.对象和数组的初始化表达式
        1).数组
            通过[]定义数组，可嵌套。
            [];                             //空数组
            [1,2,3];                        //...
            [[1,2,3],[4,5,6],[7,8,9]];      //嵌套数组
            [1,,,,2];                       //中间通过undefine填充
        2).对象
            通过{}定义对象，可嵌套。通过<key> : <val>的形式来声明kv对。
            { <property-1> : <val-1>,
              <property-2> : <val-2>,
              <property-3> : {
                  ...
              }};
              注意在声明的时候，可以用'<property>'，也可以不加引号。
              obj["<property-1>"];
              obj.<property-1>;
              都可以访问特定属性。需要注意的是，若<property>为纯数字，则必须采用obj['']的形式来访问。
    3.函数定义表达式
        var fun = function(){
            ...
        };
        fun();
        因为函数其实是一个类型为Function的值，因此可以进行简单的赋值给变量。
    4.属性访问表达式
        obj.key;
        array[index];
    5.对象创建表达式
        通过new可以创建一个对象，并调用其构造函数。
        new Date();
        若无参数需要传递，则可以省略括号：
        new Date;
    6.表达式计算
        eval函数可以对将字符串进行求值介绍。
        当字符串是的内容表达式或语句的时候，便可以当做一般代码编译并运行，【编译错误会抛错】，此时不会执行，因此这时候会感觉像是编译性语言。
        当时字符串内容为表达式时，将会直接返回值。
    7.typeof运算符
        返回操作数的类型。
    8.  delete运算符
        用来删除对象属性或是数组元素。
        需要注意的是，数组元素被删除，其长度仍然不变，其被删除的元素用undefine代替。
        var 语句声明的变量不可删除，function定义的函数和函数参数也不可删除。
四、语句
    1.声明语句
        var <name>;
    2.function
        函数定义
        var functionName = function(arg...){
            ...
        }
        也可以
        function functionName(arg...){
            ...
        }
    3.for-in
        这是对象/数组的遍历手段
        for(var p in o){
            ...
        }
        当o为对象时，p是对象的key，且无序。
        当o为数组时，p是数组的元素。
        当o为null/undefine，会自动跳过。
        需要和足以的是，for-in不会遍历对象的所有属性，只有【可枚举】的属性才能遍历到。比如一些内置方法toString()，和内置属性是不能遍历到的。
    4.with语句
        with(o){
            ...
        }
        with语句将o添加到作用域链的头部，并在语句块执行完后将作用域恢复到原始状态。
        这样可以避免对一个对象的都次前缀访问。
        比如:
            a.x=1;
            a.y=2;
            a.z=3;
        可以有:
            with(a){
                x=1;
                y=2;
                z=3;
            }
        建议少用。
    5.debugger语句
        程序运行到debugger时将会暂停，有助于程序调试。
五、对象
    js中的对象，本质上是字符串到值的映射，并且是无序的。
    因此js对象本质上就是一个HashMap。
    js的对象可以从原型对象中继承属性，比如以此种方式继承方法。
    1.js对象的基本概念
        对象的一个属性包含属性名和值，对象中不能存在两个同名的属性。
        1).属性特征
            - 可写，表明是否可以设置该属性的值。
            - 可枚举，表明是否可以通过for-in遍历。
            - 可配置，表明是否可以删除或修改修改该属性。
            通过代码给对象创建的属性，默认都具备这3个特征。
        2).对象特征
            - 原型，指向另一个对象，本对象的属性继承自原型对象。
            - 类，是一个标识对象类型的字符串。
            - 扩展标记，指明是否可以向该对象添加新属性。
        3).对象分类
            - 内置对象，由ECMAScript规范定义的对象或类，如数组，函数，日期和正则表达式。
            - 宿主对象，由Js的宿主环境定义的，如表示网页结构的HTMLElement对象。
            - 自定义对象，运行中的js创建的对象。
        - 自有属性，直接在对象中定义ide属性。
        - 继承属性，对象原型中定义的属性。
    2.创建对象
        可以通过new、Object.create()、{}均可以创建对象。
        1).对象直接量
            即{...}形式创建对象。这样没有办法指定对象的原型。
        2).通过new创建
            new后跟一个函数调用，这个函数称为构造函数，可以用来构造一种类型的对象。
            var o = new Object();   // 创建一个空对象，等价于{}
            var a = new Array();    // 创建一个数组对象，等价于[]
        3).通过Object.create()创建
            var o = Object.create([prototype, otherProperty);
            其中prototype是o的原型，otherproperty是对o属性的进一步描述。
        4).原型
            js除了null外，都和另外一个对象关联，这个对象就是原型。
                - 通过对象直接量({...}的方式)创建的对象，都有同一个原型，即Object.prototype。
                - 通过new创建的对象，原型就是构造函数的prototype属性。
            只有Object.prototype没有原型，因为这就是所有对象的最终的原型。
            当获取o.x时，若o的自由属性中没有，则会去原型的属性中寻找x
            当设置o.x的值时，会直接在o中创建x，并不会修改原型的值。
            var o = {x:1, y:2};
            fun(Object.create(o));          通过这样的机制，可以避免在fun中对o的意外修改。
	3.属性
		查询对象o的属性x，如果o中不存在x，则到o的原型对象中继续查找，直到没有原型对象为止。
		对o.x进行赋值，如果o中有不存在x则给o添加新属性x，不会对原型造成影响。
		1).删除属性
			delete o.<key>
			只是断开属性和宿主的联系，属性引用的对象其实并没有消失。
			var o = {p:{x:1}};
			var i = o.p;
			delete o.p;
			i.x仍然为1.
			delete也只能删除自有属性，不能删除继承属性。
			delete始终返回true。
			delte不能删除可配置性为false的属性。
		2).检测属性
			"<key>" in o，可以检查<key>是否存在于o中。
			也可以通过o.<key> !== undefine 来判断是否存在该属性。但是若属性存在但是值为undefine时，这个方法不能区分，必须用in。
			o.hasOwnProperty(<key>)可以判断<key>是否为o的自有属性。
			o.propertyIsEnumerable(<key>)可以判断<key>是否为o的可枚举属性。
		3).getter/setter
			由getter setter定义的属性，被称为'存取器属性'。
			查询属性时，将会调用getter方法，该方法返回的值就是读取到的值。
			属性赋值时，将会调用setter方法。
			和普通的数据属性不同，存取器属性不具备可读/写性，只有当属性同时具备getter和setter时，它才是一个可读写的属性。
			var o = {
				get prop(){  },
				set prop(val){  }
			};
			在方法中，要获取所在对象的属性，需要采用this.xxx的方式，不能直接通过xxx来引用。直接xxx是寻找的函数的作用域链。
	4.属性的特性
		一个属性包含4个特性：值、可写性、可枚举性和可配置性。
		一个存取器属性也包含4个特性：get、set、可枚举型和可配置性。
		有一个被称为“属性描述符”的对象，这个对象描述了一个属性的4个特性。
		通过【Object.getOwnerPropertyDescriptor(o, "<key>")】可以获取某个对象o特定属性<key>的属性描述符。这个函数只能取出自有属性的属性描述符对象。
		通过【Object.defineProperty(o, "<key>", <property-descriptor-object>)】。该方法要不新增属性，要不修改自有属性，不会修改继承属性。
		若需要批量修改或创建多个属性，可以通过属性映射的方式来进行：
			Object.defineProperty({},{
				x : {属性描述符对象},
				y : {属性描述符对象},
				r : {属性描述符对象},
				...
			});
	5.对象的3个属性
		1).原型
			对象的原型属性是用来继承属性的，并在实例对象创建之初就设置好了：
				var o = {...};		//Object.prototype是o的原型
				var o = new Con();	//Con.prototype是o的原型
				var o = Object.create(t);		//t是o的原型
			【Object.getPrototype(o)】可以查询o的原型。
			也可以通过o.constructor.prototype来查询o的原型。 (o.constructor是创建o使用的构造函数)
			有些浏览器支持o.__proto__来查询原型，但是不建议使用，因为并不广泛用于所有浏览器。
		2).类属性
			
		3).可扩展性
			用以表示是否可以给对象添加新属性，所有的内置对象和自定义对象都是可扩展的。宿主对象的可扩展性由Js引擎定义。
			Object.isExtensible(o)			可以用来判断对象o是否为可扩展的。
			Object.preventExtensions(o)		可以将o设置为不可扩展的对象。当然不可扩展只针对对象自身，不影响原型。若给原型对象增加属性，不可扩展对象仍然可以使用新属性。将会返回传入的对象。
			Object.seal(o)					可以将o设置为不可扩展，且自有属性不可配置。将会返回传入的对象。
			Object.freeze(o)				将对象设置为不可扩展，属性设置为不可配置，自有属性设置为只读。将会返回传入的对象。
	6.序列化对象
		var json = JSON.stringify(o);	可以将对象o转换为json字符串
		var o = JSON.parse(json);		可以将json转换为js对象
		JSON.stringify只能序列化o的【自有属性】，并且stringify支持的值类型是有限制的，比如函数是不能序列化的。
	7.Object.prototype的方法
		所有对象都继承Object.prototype，因此有必要了解下该对象提供了什么方法。
		1).toString()
			在需要将对象转为字符串时，都会调用该方法。
		2).toLocalString()
			字符串本地化，Object.prototype的toLocalString()只是调用toString()。
		3).toJSON()
			Object.prototype其实并没有这个方法，但是JSON.stringify会首先调用o.toJSON()，只有在没有实现这个方法的时候，才会调用默认的序列化。
		4).valueOf()
			和toString()类似，但是这个是为了将对象转换为原始数值，而非字符串。
六、数组
	Javascript数组的索引是基于零的32位数值，最大的可能索引是2^32-2(最多存放2^32-1个数)。数组是动态的，会根据需要增减。
	数组其实是对象的特殊形式，获取数组的索引就像对象的key一样，由于是数字索引必须通过[]来引用。
	数组继承Array.prototype中的属性。
	1.创建数组
		var empty = [];		创建空数组
		var ar1 = [1, 2, 3, ...];
		var ar2 = [obj, num, string, ...];
		var ar3 = [1,,3];	第二个元素为undefine，【元素是存在的】。
		数组直接量支持以,号结尾[1,2,3,]和[1,2,3]相同。
		var a = new Array();		同[]
		var b = new Array(length);	创建长度为length的空数组，每个元素的值为undefine。
	2.数组的读写
		数组的特别之处在于，当使用小于2^32的非负整数作为属性名时，数组会自动维护其length属性值。这是普通对象所不具备的。
		数组越界时，直接返回undefine。
	3.稀疏数组
		从0开始的不连续索引的数组。
		a = [];
		a[3] = 3;	这样子，a[0][1][2]都不存在值。
		也可以通过delete a[index]来删除中间的元素。
		需要注意的是，稀疏数组是元素根本不存在。而不是元素的值为undefine。元素值为undefine的数组，并非稀疏数组。
		稀疏数组相对普通数组而言，效率要低一些。
	4.数组的遍历
		for(var i=0, length=ar.length; i<length; i++){
			...			//初始化length是通过缓存数组长度来避免反复查询数组。
		}
		for(var index in ar){
			...;			//index是数组支持属性，通常为索引，但是由于数组的属性可能不止索引，因此还需要额外的技术过滤掉非索引的属性。
		}
		ar.forEach(function(x){
			...;			//x是数组中的元素
		});
	5.数组方法
		1).join
			将数组中的所有元素都化为字符串并连接在一起生成一个新的字符串。如果不指定分隔符，则默认逗号分隔。
			[1,2,3].join() 		=> "1,2,3"
			[1,2,3].join("|")	=> "1|2|3"
		2).reverse
			将数组的元素颠倒顺序。
		3).sort
			将数组中的元素进行升序排序。排序的比较方式是【字典比较】。就算元素是数字，也是字典比较。
			可以自定义比较方式：
			[...].sort(function(a, b){
				return a-b;
			});
		4).concat
			创建并返回一个新数组，其元素包括调用concat的原始数组和其中的参数。
			[1,2,3].concat(4,5); 返回[1 2 3 4 5]。
		5).slice
			返回数组的一个片段和子数组。这个类似于string的substr。
			slice(start,end);	返回包含[start, end)的元素。
		6).splice
		7).push/pop
		8).unshift/shift
		9).toString/toLocalString
		10).forEach
		11).map
		12).filter
		13).every/some
		14).reduce/reduceRight
		15).indexOf/lastIndexOf
	6.类数组
		数组和对象的区别是：数组自动维护length，数组的原型为Array.prototype，类属性为Array。
		类数组是属性名为数字，并且具备length属性的对象。工作起来就像真正的数组一样。函数中的Arguments就是类数组对象。
		当类数组只读时，其表现和数组基本相同。
七、函数
	函数的每次调用，都会自动传入本次调用的上下文，该上下文通过this参数来引用。
	当函数属于某个对象的方法时，调用该函数，传入的上下文就是这个对象自己。
	用于初始化一个新创建的对象的函数被称为构造函数。
	1.构造函数调用
		如果函数或者方法调用之前带有new，它就构成了构造函数调用。
		构造函数将会创建一个新对象，该对象继承自构造函数的prototype属性。构造函数创建的新对象，并将这个对象用作其调用的上下文。
		因此构造函数可以通过this来引用新创建的对象。也就是说new o.m()中，m的this并不是o，而是这个新创建的对象。
		构造函数也不会用return，它们通常初始化新对象，函数执行完毕时会自动返回该新对象。
	2.间接调用
		函数其实也是一种对象，它包含了call和apply方法可以间接的调用函数。这两个方法允许显示的设定this的参数，这样任何函数都可以作为任何对象的方法来调用。
		call使用其实参列表作为函数的实参，apply则要求以数组的形式传入参数。
	3.可变长实参列表
		在函数体内，标识符arguments是指向实参对象的引用，实参对象是一个类数组对象，可以通过下标就能访问传入函数的实参值。
		arguments也可以用来验证传入的参数个数是否正确。
		需要注意的是arguments并不是真正的数组，只是一个类数组对象，它可以通过[index]的方式来引用元素，也有length方法来标识长度。
		在es5中，不能对arguments进行赋值。
		arguments.callee:
			指代当前正在执行的函数的函数。用于匿名函数递归。
		arguments.caller:
			可以访问调用栈。
	4.命名空间
		避免命名空间污染，可以采用以下的手段：
		(function(){
			...
		}());
		以上代码将立即执行。也可以
		var o = (function(){
			...
			return function(){
				...
			};
		});
		o();中采用的命名空间也是相对安全的。
	5.闭包
		函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学中被称为闭包。
		所有的Js函数对象都是闭包。
		闭包是无法访问外部函数的this的，因为闭包有自己的this。若需要访问外部函数的this，需要通过var self=this;的方式，让闭包访问self来借此访问外部函数的this。
	6.函数对象的属性和构造函数
		1).属性
			.length是只读的，代表函数定义时形参列表的长度。通常是调用时期望传入函数的实参个数。
			.prototype
				每一个函数对象都包含一个prototype，这个属性是一个对象的引用，被称为原型函数。通过new该函数来创建的对象，都将会继承该原型。
			.bind(o)
				将函数绑定到某个对象上，该方法返回一个新函数，该新函数会在调用是自动将o传入到函数的this中。
				如:
					var f = function (y){ return this.x+y; }
					var o = {x:1};
					var f2 = f.bind(o);
					f2(1);					// 返回2
		2).Function构造函数
八、类和模块
	1.类和原型
		对象划分类的标准是原型，相同原型的对象被认为是同一类的。因此原型是类的核心。
		使用new调用构造函数会自动创建一个新对象this，因此构造函数只需要初始化这个新对象就可以了。并且构造函数的prototype属性被用作为新对象的状态。
		function Class(){			// 构造函数
			this....;
		}
		Class.prototype = {			// new对象的原型
			toString : function(){
				...
			}
			...
		};
		通常将属性保存在新对象中，在原型中主要实现相关的方法。
		1).构造函数和类标识
			原型对象是类的唯一标识，当两个对象有相同的原型时，将会认为这两个对象属于同一类。
			构造函数是类的公共标识，r instanceof Class，用来判断r是否继承与Class.prototype。
		2).constructor属性
			每个Js的构造函数都包含一个prototype属性，这个对象默认包含唯一一个不可枚举属性constructor，该函数就是构造函数本身。
			由于构造函数是类的公共标识，因此这个constructor属性为对象提供了类。
			var o = new F();
			o.constructor === F;
			但是若自己定义这个prototype时，对象中的constructor不是指向构造函数的，这时需要显示的定义constructor的指向：
				方案一: 显示指定
					F.prototype={constructor:F; method=function(){...}};
				方案二: 在原对象的基础上添加属性
					F.prototype.newMethod=function(){
						...
					}
	2.Javascript中的Java式继承
		
九、事件处理
十、脚本化Http
十一、客户端存储
	客户端存储支持一下几种形式：
		Web存储
		cookie
		Web离线应用
		Web数据库
		文件系统API
	1.localStorage和sessionStorage
		localStorage和sessionStorage的区别在于其有效期和作用域不同。
		1).有效期
			localStroage的有效期是永久的，除非人为删除。
		2).作用域
			localStrage的作用域是同一文档源，文档源由协议(http/ftp/...)，主机名，端口号决定。
			同一文档源的localStorage是公用的。由于localStorage是保存在浏览器里的，因此若不同浏览器之间不共享localStorage。
	2.cookie
		cookie代表了少量的数据。cookie会自动在Web浏览器和Web服务器之间传输，因此服务器的程序方便拿到cookie值。因此cookie其实是为服务器准备的。
		可以通过navigator.cookieEnable来检测cookie是否启用。
		1).cookie的有效期和作用域
			a).有效期
				cookie的默认有效期很短，只能持续在web浏览器会话期间，一旦用户关闭浏览器，cookie保存的数据便丢失。
				需要注意的是cookie的默认有效期并非是单个窗口线程，而是整个浏览器进程，进程关闭才会丢失cookie。
				通过max-age属性，可以设定cookie的生存周期。以前是expire属性，现在统一采用max-age属性。
			b).作用域
				cookie的作用域是通过domain和path来确定的。
				默认情况下，cookie和创建它的页面有关，并对该页面和该web页面同目录及其子目录的其他web页面可见：
					url/index.html页面下创建了cookie，
					那么url/index2.html可见cookie
					并且url/file/index3.html同样可见cookie
				通过设置cookie的path，可以让cookie和path的兄弟目录及其子目录下cookie可见。特殊的，若将path设为"/"，以为这cookie和localStorage具有相同的作用域，即仅有文档源决定的作用域。
				需要注意的是，path不能用以作为访问控制，因为在某个页面下可见的cookie，当该页面有iframe形式加载其他页面时，那些页面同样可以读取cookie。
				通过设置cookie的domain，可以让cookie在不同域名下可见。如设置domain为.jd.com，那么所有.jd.com为后缀的站点都可见。默认情况下的domain是当前Web服务器的主机名。需要注意的是，domain只能设置当前服务器的域。
		2).保存cookie
			document.cookie="key=value";	下次读取document.cookie时，该kv对就在文档cookie列表中了。path domain max-age均采用默认值。
			document.cookie="key=value;max-age=seconds"		cookie生存时间为seconds秒。
			docuemtn.cookie="k=v;max-age=seconds;path=xxx;domain=xxx"
		3).设置cookie
			要改变cookie的值，需要使用相同的key，domain和path，否则会添加新的cookie。设置新的value和max-age可以改变以前的值。
			要删除一个cookie，需要使用相同的名字，路径和域，然后使用一个非空的值，并将其max-age设置为0，再次设置该cookie即可。
			document.cookie="key=nn;domain=...;path=...."
		4).读取cookie
			使用Js来读取document.cookie时，返回的是一个字符串。该字符串包含了一系列的kv值，并以分号分割。但是并不包含这些cookie-kv的属性。
			
			
十二、多媒体和图形编程