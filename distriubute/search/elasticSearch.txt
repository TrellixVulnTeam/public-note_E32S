一、简介
	es其实就是对luncene进行了一个封装，es是为了分布式搜索而生。
	还有一个搜索引擎solr，也是对luncene进行了封装，也有solar cloud。
	es是一个机遇luncene的实时分布搜索和分析引擎。基于RESTful接口：
		普通请求接口是 ...get?a=1
		rest请求接口是 ...get/a/1
	es只支持json格式

二、接口使用
	curl -XPUT 'http://hosts:9200/index-base'							建立索引库，put用更新
	curl -XPOST/XPUT 'http://hosts:9200/index-base/type/id' -d '...'	post用于插入新的json数据
	curl -XGET 'http://hosts:9200/index-base/type/id'					返回对应的json数据，包括版本号
	curl -XGET 'http://hosts:9200/index-base/type/id?pretty'			返回对应的格式化json数据，包括版本号
	curl -XGET 'http://hosts:9200/index-base/type/id?_source?pretty'	返回对应的格式化json数据，不包括版本号等其他数据
	curl -XGET 'http://hosts:9200/index-base/type/_search?pretty'		返回type下的所有数据json数据，包括版本号
	curl -XGET 'http://hosts:9200/index-base/_search?pretty'			返回索引库下的所有数据json数据，包括版本号
	curl -XGET 'http://hosts:9200/index-base/_search?q=name:xx&pretty'	返回索引库下的json数据中name字段为xx的数据，包括版本号
	curl -XGET 'http://hosts:9200/index-base/_mget?pretty' -d .....		返回多条结果
	curl -XPOST/XPUT http://hosts:9200/index-base/type/id/_create 		对应的数据存在，则报错。
	
	es可以使用put或者post进行更新，如果指定id的文档已经存在，则执行更新操作。执行更新操作的时候：
		- es首先将旧的文档删除
		- 添加新的文档
		- 旧的文档不会立即消失，但是也无法访问
		- es会在继续添加添加更多数据的时候在后台清理已经标记为删除状态的文档
	局部更新，只能使用post，可以添加新字段或者修改已有字段：curl -XPOST 'http://hosts:9200/index-base/type/id/_update' -d 'json'，版本号会随之更新
	删除：curl -XDELETE 'http://hosts:9200/index-base/type/id',删除一个文档并不会立即生效，而是标记为已删除，在后台中由其他线程删除。
	2.批量操作
		角色:
			action：index/create/update/delete
			metadata：_index, _type, _id
			request body：_source
		格式:
			{action:{metadata}}\n		//指定对metadata执行的操作
			{request body}\n			//操作的具体数据
			{action:{metadata}}\n
			{request body}\n
		curl -XPOST 'http://hosts:9200/_bulk' -d 
		' {"index":{"_index":"index-base", _type:"emp", "_id":10"}}		//
		  {"name":"test10", "age":10}									//request body
		'
		curl -XPOST 'http://hosts:9200/_bulk' --data-binary @<文件名>	//将执行文件里面的bulk操作
	3.版本控制
		乐观控制：不会阻塞某一数据的修改，但是如果在读取和写入之间数据发生了变化，更新就会失败，由程序决定如何解决这个冲突，一般重新读取数据再更新。
		curl -XGET 'http://hosts:9200/index-base/type/id'									//获取数据，包括数据的版本号。
		curl -XPUT 'http://hosts:9200/index-base/type/id?version=<version>' -d '{...}'		//传过去版本号进行更新，es会获取传过去的版本号，进行对比，如果版本号相等才会执行更新。更新操作会修改版本号。
																							//不传版本号，就会强制性使用最新版本号进行更新，当更新操作不依赖于保存的数据时就可以用这样的方式。
三、核心概念
	1.cluster(集群)
		集群有多个节点，集群内部有主节点，对于外部而言访问任何节点都可以，因此对于外部而言来说es是去中心化的。
		只需要在同一网段启动多个es节点，就可以自动组成集群。默认情况下es可以自动发现同一网段内的节点，自动组成集群。
	2.shards(分片)
		es可以将一个完整的索引库分成多个分片，不同的分片放在不同的节点上以实现可伸缩性。这类似于hdfs的file分成多个块，将多个块放在不同的节点上。
		分片数量只能在创建索引库前指定。
	3.replicas(副本)
		为系统提供容错性和负载均衡。副本是按分片进行备份的，这也类似于hdfs的副本机制。
		副本数只能在创建索引前指定。
	4.recovery
		es有节点加入或退出时会根据负载将分片重新分布。挂掉的节点恢复后，也会进行数据的恢复。
	5.gateway
		es的持久化方式，默认先将索引放到内存，当内存满了再持久化到硬盘。
		当这个集群关闭再重启时，会从gateway中读取数据。es的gateway有多种方式，本地文件系统和分布式文件系统。一般就放本地。
	6.discovery.zen
		es的同网段自动发现机制。es是一个基于p2p的系统，它先通过广播寻找存在的节点，再通过多播协议来进行节点之间的通信，同时也支持点对点交互。
		如果是要在不同网段之间组成集群，就需要禁止discovery.zen机制，再设置新节点启动时能够发现的主节点列表。
	7.transport
		es内部的节点或集群与客户端的交互方式。
		默认内部采用tcp方式。

四、编程
	ImmutableSettings settings = ImmutableSettings.settingsBuilder().put("client.transport.sniff", true).build();	//启用自动发现机制，只需要在客户端指定一个ip，就可以获得该ip所在集群的所有节点。
	TransportClient client = new TransportClient(settings);															//获取es transport客户端对象
	client.addTransportAddress(new InetSocketTransportAddress("<ip>", 9300));										//指定连接的es节点ip和端口，端口默认9300，可以添加多个es的节点的ip，只要连接到任何一个节点，代码就能正常使用。如果添加了自动发现机制，那么会自动搜寻其他节点。
	1.创建索引库数据
		IndexResponse response = client.prepareIndex(index, type, id).setSource(jsons/hashmap).execute().actionGet();	//创建索引库中的数据。如果索引库不存在，则创建索引库。
	2.查询数据
		GetResponse response = client.prepareGet(index, type, id).execute().actionGet();					//获得指定索引库-类型-id的数据
	3.更新数据
		UpdateResponse response = client.prepareUpdate(index, type, id).setDoc(json/hashmap).actionGet();	//更新，version自增。
	4.更新插入数据
		有则更新，没有则插入
		UpdateRequest request = new UpdateRequest(index, type, id);
		request.doc(json/hashmap/XContent);
		request.upsert(json/hashmap/XContent);
		UpdateResponse response = client.update(request).get();
	5.删除数据
		DeleteRequest request = new DeleteRequest();
		request.index(index);
		request.type(type);
		request.id(id);
		DeleteResponse response = client.delete(request).get();
	5.查询指定索引库中的总数
		long count = client.prepareCount(index).execute().get().getCount();
	6.批量操作
		BulkRequestBuilder builder = client.prepareBulk();
		IndexRequest request1 = new IndexRequest(index, type, id);
		request.source(....);
		DeleteRequest request2 = new DeleteRequest(index, type, id);
		
		builder.add(request1);
		builder.add(request2);
		...
		builder.execute().actionGet();
	7.专门的查询
		SearchResponse response = client.prepareSearch(index)
										.setTypes(type)
										.setSearch(SearchType.DFS_QUERY_THEN_FETCH)			//指定查询类型
										.setQuery(QueryBuilders.matchQuery(key, value))		//指定查询关键字
										.addSort(key, SortOrder.ASC)						//按该关键词排序
										//from和size是用于实现查询结果的分页，可以获取结果中某个范围额内容
										.setFrom(from)
										.setSize(10)
										.execute().actionGet();
		SearchHit[] hits = response.getHits().getHits();		//获得查询结果
		查询类型:
			- QUERY_THEN_FETCH
			- QUERY_AND_FETCH
			- DFS_QUERY_THEN_FETCH
			- DFS_QUERY_AND_FETCH