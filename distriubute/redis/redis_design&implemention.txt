一、基本数据结构
	1.动态字符串
		Redis采用简单动态字符串(Simple Dynamic String, 即SDS)的抽象类型，并将SDS用作Redis的默认字符串表示。
		1).定义
			struct sdshdr{
				int len;		// buf中已经使用的字节数量，注意len不包含'\0'结尾符。
				int free;		// 记录buf数组中未使用的直接的数量
				char buf[];		// 字节数组，用于保存字符串
			}
		2)优点
			- 常数复杂度获取字符串长度
			- 杜绝缓冲区溢出
			- 减少修改字符串长度时所需的内存重分配次数
			- 二进制安全
			- 兼容部分C字符串函数
	2.链表
		1).定义
			链表节点
			typedef struct listNode{
				struct listNode *prev;		// 前置节点
				struct listNode *next;		// 后置节点
				void * value;				// 节点值
			}listNode;
			链表
			typedef struct list{
				listNode *head;
				listNode *tail;
				unsigned long len;
				void *(*dup)(void *ptr);				// 节点值复制函数, 复制节点链表所保存的值。
				void (*free)(void *ptr);				// 节点值释放函数, 将节点链表的空间释放掉。
				int (*match)(void *ptr, void *key);		// 节点值比较函数, 比较链表积淀所保存的值和另一个输入的值是否相等。
			}list;
	3.字典
		1).定义
			- hash表
				typedef struct dictht{
					dictEntry **table;			// table[i]指第i个桶，每个桶中又是一个dictEntry指针，用于构建链表
					unsigned long size;			// 桶个数
					unsgined long sizemask;		// 用于计算索引值，值恒定为size-1
					unsgined long used;			// hash表中已有的kv对数量
				}dictht;
			
			- hash表节点
				typedef struct dictEntry{
					void *key;					// entry的键
					union{						// entry的值，值可以采用指针，或是uint64的整数，或是int64的整数
						void *val;
						uint64_t u64;
						int64_t s64;
					}v;
					dictEntry *next;			// 下一个entry
				}dictEntry;
			
			- 字典
				typedef struct dict{
					dictType *type;		// 类型特定函数
					void *privdata;		// 私有数据
					dicht ht[2];		// 两个hashtable，第二个是用于扩容的辅助空间。
					int rehashidx;		// 用于rehash，记录rehash目前的进度。
				}dict;
				type是指向的dictType提供了一系列的函数集合，不同的dictType实现不同的函数
			- 操作特定类型kv对的函数
				typedef struct dictType{
				}dictType;
		2).rehash
			当hash表保存的kv对太多或者太少时，程序需要对hash表的大小进行扩大和缩小。
			a).为字典ht[1]哈希表分配空间，如果是扩容操作那么ht[1].size>=ht[0].used*2，如果是收缩操作那么ht[1].size>=ht[0].used，这样尽量让他退化成数组，以便快速读写。
			b).将保存在ht[0]的所有kv对计算k在ht[1]上的桶数，并放到ht[1]上。
			c).释放ht[0]，将ht[1]设置为ht[0]，并在ht[1]上新建
		3).渐进式rehash
			一次性完成rehash在hash表特别大的时候是不太合适的，因为此时rehash操作将非常的耗时，此时应该考虑渐进式rehash。
			即分多次，渐进式的完成rehash。
			a).在ht[1]分配空间
			b).dict中维护这rehashidx，并将值设置为0，表示rehash正式开始。
			c).在rehash期间，每次对字典执行添加，删除，查找或者更新操作的时候，程序除了执行指定操作外还会将rehashidx对应的桶上的所有节点放到ht[1]中，并且rehashidx++。
			d).ht[0]的所有kv对都放到ht[1]上后，把rehashidx=-1，代表rehahs结束，再将ht[1]设置为ht[0]。
	4.跳跃表
		跳表是一种有序数据结构，它通过在每个节点中维持多个指向其他节点指针，从而达到快速访问的目的。
		跳表支持平均O(logN)、最坏O(N)复杂度的节点查找。大部分情况下效率媲美平衡树，并且实现简单。
		跳跃表在Redis中主要是作为有序集合的实现 以及 集群节点中用作内部数据结构。
		1).结构
			- 跳跃表结构
				header，指向跳跃表头结点
				tail，指向跳跃表尾节点
				level，记录目前跳跃表内，最大的节点层数(排除头结点)
				length，记录跳跃表的长度，即包含的节点数(排除头节点)
			- 跳跃表节点结构
				typedef struct zskiplistNode{
					// 每个层都有两个属性，前进指针和跨度。前进指针用访问节点后的其他节点，跨度是前进指针指向的节点和当前节点的距离。
					struct zskiplistLevel{					
						struct zskiplistNode *forward;
						unsigned int span;
					}level[];
				
					struct zskiplistNode *backward;		// 用于指向当前节点的前一个节点。
					double score;	// 按该参数进行排序。
					robj *obj;		// 节点所保存的对象。
				}zskiplistNode;
				* 节点的leve越多，访问其他节点的速度越快，level的span上大下小。每次创建一个节点时，level个数是随机生产的。
	5.整数集合
		集合较小，并且里面全是整数的时候可以采用该方案。
		1).定义
			typedef struct intset{
				uint32_t encoding;		// 编码方式，指定数组中的元素采用什么类型。取值为INTSET_ENC_INT16, INTSET_ENC_INT32, INTSET_ENC_INT64。
				uint32_t length;		// 集合包含元素的数量。
				int8_t   contents[];	// 保存元素的数组，虽然这里的类型是int8_t，但实际的类型取决于encoding。并且是按【从小到大】保存数据。
			}intset;
		2).升级
			新来的数据过大，当前的数据编码不能容纳它。此时需要对数据编码进行升级。
			需要注意的是升级是来的数据太大或者太小，因此必定是在所有数据大，或是比所有数据小，因此在最左边或是最右边进行扩展即可。
		3).降级
			intset不支持降级操作，一旦升级后就一直保存升级后的状态，就算集合里面最大值并非需要高级的状态。
	6.压缩列表
		可以用于实现列表对象或是hash对象。用于节约内存而开发的。
		1).构成
			- 压缩列表的构成
				zlbytes 4字节 记录压缩列表占用的内存总字节数。
				zltail  4字节 压缩列表首地址到最后一个节点之间所间隔的字节数。
				zllen   2字节 记录了压缩列表包含的节点数量。
				entry1  不定  压缩列表节点
				...
				entryN  不定  压缩列表节点
				zlend   1字节 特殊值0xFF，用于标记压缩列表的末端。
			- 压缩列表节点的构成
				previous_entry_length, 
					记录压缩列表中前一个节点的长度，长度是1字节(小于255字节时)或者5字节(第一个字节恒为0xFE标识是5字节大小)。
					通过指向当前节点的指针 以及 该参数，可以定位到上一个节点的起始位置。
				encoding, 记录content属性所保存的数据的类型以及长度
				content，负责保存节点的值
		2).连锁更新
	7.对象
		Redis并没有直接使用底层数据结构，而是构建了五种对象，并且在应用层上使用的是这些对象。
		Redis实现了基于【引用计数】的内存回收机制，当程序不再使用某个对象的时候，这个对象所占用的空间将会被回收。
		Redis也利用引用计数实现了内存共享机制，通过让多个数据库共享同一个对象来节约内存。
		Redis的使用是kv形式的，k和v分别为一个对象。
		Redis的对象抽象如下：
		typedef struct redisObject{
			unsigned type:4;			// 类型,取值有:REDIS_STRING, REDIS_LIST, REDIS_HASH, REDIS_SET, REDIS_ZSET
			unsigned encoding:4;		// 编码,取值有:REDIS_ENCODING_INT(long整数), EMBSTR(embstr编码的sds), RAW(sds), HT, LINKEDLIST(双端链表), ZIPLIST, INTSET, SKIPLIST(跳跃表和字典)
			unsigned lru:22;			// 记录对象最后一次被命令程序访问的时间
			void *ptr;					// 指向底层实现数据结构的指针，具体的类型由encoding指定
		}robj;
		通过 TYPE <key> 可以看到<key>所对应value的type。
		通过 OBJECT ENCODING <key> 可以看到<key>所对应value的encoding。
		1).字符串对象
			字符串对象的编码可以是int，raw，embstr。
			- int
				当一个字符串对象保存的是整数值，并且整数值可以用long来表示，那么ptr属性(此时为long *)里面就会保存该整数值。
				通过append向里面追加一个非数字的字符时，会被转换为raw。
			- raw
				当一个字符串对象保存的是一个字符串，并且该字符串长度大于32字节，那么使用sds来保存这个字符串。
			- embstr
				如果字符串长度<=32字节，采用embstr。和raw的区别在于：
					raw的内存申请和内存释放都是两次(因为有redisObject和sds两个对象)，embstr一次性分配连续的空间给redisObject和sds。
					连续空间能更好的使用缓存带来的优势。
				embstr是只读的，若通过append等函数修改，则会转换为raw格式。
			需要注意的是，浮点数实际保存也是当做字符串的，即把浮点数转换成字符串来保存。执行运算操作时会把字符串转换成浮点数再运行。
			String类型的redisObject，将会被其他4种对象复用，其他四种对象里面保存的元素其实就是type=string的redisObject(raw和embstr的选择仍然根据上述判断)。
		2).列表对象
			编码方式可以是ziplist，linkedlist。
			当同时满足以下两个条件时，列表对象使用ziplist编码，否则使用linkedList:
				* 列表对象保存的所有字符串元素的长度都小于64字节。
				* 列表对象保存的元素数量小于512个。
		3).hash对象
			编码方式可以是ziplist, hashtable.
			当同时满足以下两个条件时，hash对象采用ziplist编码，否则使用hashtable：
				* hash对象保存的所有kv对的字符串长度都小于64字节。
				* kv对象的个数小于512个。
			- ziplist
				一个kv对象在ziplist中总是紧挨着的，k在前，v在后。
				新添加的kv对将放在最后。
			- hashtable
				用dict保存kv对。
		4).集合对象
			编码方式可以是intset，hashtable。
			当同时满足以下两个条件时，使用intset编码，否则使用hashtable：
				- 集合对象保存的所有元素都是整数值。
				- 集合中的元素个数不超过512。
			在用hashtable是，采用的策略是在dict中key放集合元素，value放null。
		5).有序集合对象
			编码方式可以使ziplist，skiplist。
			zset <key> <score> <member>  在<key>这个有序集合中，添加一个分值为<score>的成员<member>
			- ziplist
				在使用ziplist时，每个集合元素使用两个紧挨的节点来保存，第一个节点是member，第二个节点是score，即member在前，score在后。
				score较小的放在靠近表头的方向，较大的靠近表尾。
			- skiplist
				跳跃表的object属性保存了元素的member，score元素保存了元素的score。
				并且有一个dict保存了从成员->分值映射，可以O(1)找到给定成员的分值。这样方便在跳跃表中通过成员来定位其位置。
			当同时满足以下两个条件时，对象使用ziplist，否则使用skiplist：
				* 有序集合所有成员的的字符串长度小于64。
				* 有序集合的元素数量小于128。
		6).引用计数
			- 内存自动回收
			- 复用节约内存
二、单机数据库的实现
	1.数据库
		Redis服务器将所有数据库都保存在redisServer结构的db数组中。	
		struct redisServer{
			int dbnum;			// 服务器数据库数量	, 由服务器配置的database选项决定，默认为16。
			redisDb **db;		// 
			struct saveparam *saveparams;		// 记录自动RDB条件的数组
			long long dirty;					// 上一次成功执行保存以后，服务器对数据修改的次数
			time_t lastsave;					// 上一次成功执行保存的时间
			sds aof_buf;						// aof缓冲区
		};
		1).切换数据库
			每个Redis客户端都会有目标数据库，客户端的读写操作都是在目标客户端中进行的。Redis客户端默认的目标数据库是0号数据库。
			可以通过SELECT指令来切换目标数据库。并且服务器内部，通过redisClient来维护客户端当前的状态，该状态中包含了客户端所用的目标数据库。
			typedef struct redisClient{
				redisDB *db;
			}redisClient{};
			SELECT指令就是修改这个属性。
		2).数据库键空间
			每个数据库都包含了一个hash结构，数据库中包含了很多的kv对。k是字符串的redisObject，v是有5种可能的redisObject。
			typedef struct redisDB{
				dict *dict;
				dict *expires;						// 过期字典。记录带过期时间的key
			}redisDB;
			在读取一个key后，会更新这个key里面的lru时间。
			若在读取一个key时，发现这个key过期了将会删除这个key。
			当有某个key被watch后，该key会被标记为脏，修改一次脏计数加1，这个计数会触发服务器的持久化以及复制操作。
		3).key的生存时间和过期时间
			EXPIRE 可以以秒为精度来设置某个key的生存时间(TTL)，在经过指定的时间之后就会自动删除生存时间为0的键盘。
			TTL 可以返回一个带有生存时间的key 剩余的生存时间。
			PERESIT 可以移除一个key的生存时间。
			- 保存过期时间
				redisDB中的expires属性保存了数据库中所有key的过期时间。所以expires被称为过期字典。
				expires的key指向某个数据库键，value是一个long long类型的整数，是一个unix时间戳。
			- 计算剩余生存时间
				过期时间戳-当前时间戳 即为 剩余生存时间。
			- 过期键的判断
				首先 检查键是否存在过期时间，如果存在，那么取得过期时间。
				最后 检查当前时间戳是否大于过期时间戳，大于那么过期，否则没有过期。
		4).过期键的删除策略
			a).通用策略
				- 定时删除
					行为：在设置key的过期时间的同时，创建一个timer，timer在key的过期时间到达时立即执行对key的删除操作。
					优点：过期及时删除，保证内存最优。
					缺点：当有多个键过期时，将会在删除上花费大量的cpu时间，使对高并发的请求响应过慢。而其实现在内存够用，根本不用删除进行释放内存。
				- 惰性删除
					行为：放任key过期不管，但是每次从dict取值时，都判断key是否过期，若过期则删除，没有过期则返回。
					优点：CPU时间最优，只有在必要的时候才会删除键。
					缺点：过期键太多，而这些键根本不可用，这属于一种内存泄露的行为。浪费大量的内存。
				- 定期删除
					行为：每隔一段时间，程序对过期字典进行检查，删除过期键盘。
					优点：通过一段时间的进行清理，优化了cpu时间和内存占用。
					缺点：定期时间如果隔得太短，清理时间太长，影响并发性。定期时间太长，清理时间太短，内存浪费现象仍然存在。不好取舍。
			b).redis策略
				redis的删除策略是惰性删除和定期删除相互配合的方式，在合理使用CPU时间和避免内存浪费之间取得了平衡。
				- 惰性删除的实现
				- 定期删除的实现
					Redis服务器周期性的操作serverCron时，activeExpireCycle就会被调用，在规定时间内分多次遍历服务器中的各个数据库
					随机抽出数据库中expires一部分键的过期时间，并删除其中的过期键。
				对其他功能的影响：
					* RDB
						在执行SAVE或者BGSAVE生成一个新的RDB文件时，程序会对数据库中的键进行检查，已过期的键不会保存到RDB中。
						在载入一个RDB文件时，对键的过期时间进行检查，没有过期的键会直接导入数据库中。若服务器是从服务器模式，载入时会载入过期键，但是在于主服务器同步时，从服务器会清空。
					* AOF
						过期键被定期或惰性删除以后，会向AOF追加一条DEL命令来显示的记录该键被删除。
						AOF重写时，会检查键是否过期，过期了的不会再保留。
					* 复制
						当服务器运行在复制模式下，从服务器的过期键删除动作由主服务器控制：
							# 主服务器在删除一个键后，会显示地向所有从服务器发送一条DEL命令，告诉从服务器删除这个键。
							# 从服务器在执行客户端发送的读命令时，即使碰到过期键也不会删除，而是返回该键值，相当于没有过期。
							# 从服务器只接受主服务器DEL来进行删除，这样是为了保证一致性。
	2.RDB(Redis Data Base)
		Redis的数据库状态是保存在内存中的，为了避免宕机等问题造成内存清空而数据消失，因此可以采用RDB持久化。RDB是压缩后的二进制文件。
		1).RDB的创建与载入
			SAVE 等待直到RDB文件创建完毕。
			BGSAVE 派生子进程，并由子进程创建RDB文件。
			Redis会在启动时检测RDB文件是否存在，若存在自动载入RDB文件，并且在载入期间服务器会处于阻塞状态。
			在BGSAVE期间，不能再接收SAVE和BGSAVE指令，并且BGREWRITEAOF会阻塞到BGSAVE完成以后去处理。
			需要注意的是，BGSAVE期间是创建的子进程，而子进程有父进程的所有数据，因此生成的文件是在开始进行异步RDB瞬间的快照。
		2).自动间隔性保存
			可以配置多个自动保存的时间条件，当满足其中一个自动保存的条件，那么会自动执行BGSAVE。
			save <second> <cnt> 指的是在<second>秒内修改了<cnt>次，则执行BGSAVE。
			该指令每执行一次，就设置一次自动保存条件。
			struct saveparam{
				time_t seconds;
				int changes;
			}
			Redis周期性操作函数serverCron默认每100ms会执行一次，该函数对于正在运行的服务器进行维护，
			其中一项工作就是检查save所选的保存条件是否满足，若满足则执行BGSAVE。
		3).不安全性
			要满足条件 或是 人为输入SAVE GBSAVE才进行同步，因此宕机容易丢失数据。
	3.AOF(Append Only File)
		aof通过保存Redis服务器执行的写命令来记录数据库状态。
		1).AOF持久化的实现
			当打开AOF后，服务器执行完一个写命令后，会以协议格式将被执行的写命令追加到aof_buf【缓冲区】的末尾。
			需要注意的是，添加到的是缓冲区而非硬盘，添加到硬盘是aof_buf里面的数据同步到硬盘。所以是完成了写命令，过段时间再进行持久化。
			Redis的服务器进程就是一个事件循环，这个循环中的文件事件负责接收客户端的命令请求，以及发送回复，时间事件负责执行serverCron这类函数。
			Redis服务器每次结束一个循环之前，都会调用flushAppendOnlyFile函数，用于判断是否需要将aof_buf中的数据同步到AOF文件中。
			是否进行同步，主要是通过appendfsync选项来进行判断：
				- always，将aof_buf缓冲区的内容全部写入并同步到AOF文件。最慢，也最安全。
				- everysec，将aof_buf缓冲区的内容全部写入，1秒同步一次。因为1秒才进行同步，所以顶多丢失1秒的数据。
				- no，将aof_buf缓冲区的内容全部写入，但是不进行同步。最快，但是容易丢失数据。
			写入指定是写入文件，但操作系统会先把数据放在缓冲区里面，直到缓冲区填满才同步到磁盘中。
		2).AOF的载入与还原
			只要Redis服务器读入并重新执行一遍AOF文件里面保存的写命令，就可以还原服务器关闭之前的数据库状态了。
			主要的步骤是：
				- 服务器创建伪客户端，这是因为Redis命令只能在客户端中执行，而AOF里面就是这些需要在客户端上执行的命令
				- 伪客户端读取并分析一条写命令
				- 使用伪客户端执行写命令，直至写完
		3).AOF的重写
			避免AOF文件过大，需要对其进行重写，压缩冗余命令。创建一个新的AOF文件代替旧的AOF文件。
			AOF重写也是一个耗时的工作，因此通常交于后台子进程完成。
			子进程是完全复制的父进程，也因此子进程有父进程数据的【完整副本】，保证了线程安全性。
			AOF重写期间，服务器可以继续接收写指令，会导致数据库状态和重写后的AOF文件所保存的状态不完全一致。
			为了解决不一致的问题，Redis服务器设置了一个AOF重写缓冲区，这个缓冲区在服务器创建出子进程后开始使用，新的指令追加到该缓冲区中。
			AOF重写完成，将这些追加到AOF文件末尾。这个地方会造成阻塞。
		4).不安全性
			首先aof文件在指令执行后并不会立即同步，同步前如果宕机会丢失数据。
			其次aof重写时，此时新的写操作不会追加到原aof文件中，而是保存在内存中，在整个过程合并完成前宕机会导致数据丢失。
	4.事件
		Redis服务器是一个事件驱动的程序，服务器需要处理以下两个事件：
		1).文件事件
			Redis服务器通过socket与客户端连接，而文件事件就是对socket操作的抽象。通信会产生文件事件。
			Redis基于Reactor模式开发了网络事件处理器，也称为文件事件处理器：
				- 处理器使用IO多路复用程序来监听多个套接字，根据套接字当前执行的任务来为套接字关联不同的事件处理器，这个事件处理器其实就是函数。
				- socket准备好执行accept，read，write，close时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。
			文件事件的处理器：
				- 连接应答处理
					当Redis服务器进行初始化的时候，会将监听socket和连接应答处理器绑定在一起，当有连接到来时引发连接应答处理器来执行。
				- 命令请求处理器
					该处理器负责从socket中读出客户端发出的命令请求。
				- 命令恢复处理器
					当服务器由命令回复需要传送给客户端时，会将写事件和命令恢复处理器绑定在一起，当客户端准备好接受数据，就会产生写事件，引发执行。
					写完成以后，解除命令回复处理器与写事件的绑定。
		2).时间事件
			有些事件在给定时间点执行，时间事件就是服务器对这类事件的抽象。
			时间事件分为两类：
				- 定时事件，让一段程序在指定的时间之后执行一次。
				- 周期事件，让一段程序每隔指定时间就执行一次。
			一个时间事件主要由以下三个属性组成：
				- id，全局唯一，从小打到递增。
				- when，记录时间事件的到达时间。
				- timeProc，时间事件处理器，其实就是个函数。当时间事件到达，服务器就会调用相应的处理器来处理事件。
			timeProc的返回值决定事件的类型，若返回AE_NOMORE，则为定时事件，否则为周期事件。若为周期事件返回的是一个时间，对这个时间事件进行更新，以便循环。
			服务器将所有的事件都放在一个【无序】链表中，每当时间事件处理器运行时就遍历整个链表，查找所有已到达时间的事件，并调用相应的事件处理器。
			上述无序，指的是不按when来进行排序，链表顺序是id从大到小。
			虽然是遍历，但是Redis通常【只有一个】serverCron时间事件，所以基本上是退化成了一个单链表来使用。
			serverCron时间事件
				- 清理过期键
				- 尝试AOF和RDB持久化操作
				- 若是主服务器，对从服务器进行定期同步
				- 若是处于集群模式，对集群进行定期同步和连接测试
				- 更新服务器的各类统计信息。
		3).事件的调度
			void processEvent(){
				time_event = asSearchNearestTimer();				// 获取最近的一个时间事件
				remaind_ms = time_event.when - unix_ts_nown();		// 计算还有多久执行最近的时间事件
				if(remaind_ms<0){remaind_ms=0;}
				timeval = create_timeval_with_ms(remaind_ms);		// 创建timeval结构
				aeApiPoll(timeval);									// 以timeval的超时时间来等待文件事件
				processFileEvents();								// 处理文件事件
				processTimeEvents();								// 处理时间事件
			}
			
			void main(){
				init_server();
				while(server_is_not_shutdown){						// 一直循环处理，在里面的remaind_ms上面会进行一定时间的阻塞，serverCron通常为100ms。
					processEvent();
				}
				clean_server();
			}
	5.客户端
		一个服务器可以与多个客户端建立网络连接，每个客户端可以向服务器发送命令请求，服务器接收并处理客户端发送的命令请求，并向客户端返回命令回复。
		每个客户端连接都有一个redisClient结构，这个结构保存了客户端当前的状态信息。
		这些redisClient结构保存在redisServer中，以【链表】的形式存储:
		struct redisServer{
			list *clients;				// 这个链表就是redisClient
			redisClient *lua_client;	// 负责lua脚本执行的伪客户端
		};
		1).客户端属性
			typedef struct redisClient{
				int fd;						// 套接字描述符
				robj *name;					// 名字
				int flag;					// 标志
				sds querybuf;				// 输入缓冲区
				robj **argv;				// 命令参数
				int argc;					// 命令参数的个数
				struct redisCommand *cmd;	// 命令实现函数
				char buf[REDIS_REPLY_CHUNK_BYTES];	// 默认大小为16kb(16*1024)
				int bufpos;					// buf中数据的长度
				list *reply;				// 可变大小缓冲区，通过StringObject链表来进行连接非常长的字符串对象。
				int authenticated;			// 身份认证通过标志
				time_t ctime;				// 记录客户端创建时间
				time_t lastinteraction;		// 客户端最后一次与服务器互动的时间
				time_t obuf_soft_limit_reached_time;	// 输出缓冲区第一次达到软性限制的时间
			}redisClient;
			CLIENT list可以列出目前连接到服务器的所有普通客户端属性
			a).套接字描述符
				fd可以为-1，代表伪客户端处理的命令请求。主要来源于Lua脚本或者AOF操作。
				fd大于-1，就是普通的客户端连接。
			b).名字
				默认情况下，一个连接到服务器的客户端是没有名字的，即name域为空。
				通过CLIENT setname可以设置名字。
				robj *name,若没有设置名字，则为null，否则是一个StringObject。
			c).标志
				记录客户端的角色。
			d).输入缓冲区
				客户端发送的命令请求会保存到querybuf属性中，服务器会进一步对请求内容进行解析，
				更进一步，将命令参数和命令参数的个数保存的客户端的argv和agrc属性中。
				argv是一个数组，数组中每个参数都是一个robj指针。其中argv[0]是要执行的命令。
				解析得到argv和argc后，服务器会根据argv[0]的值，找到对应的命令实现函数，并将cmd指针指向该命令实现函数。
				注意，有一个dict保存了每个命令对应的命令实现函数。
			e).输出缓冲区
				执行命令所得到的命令回复会保存在输出缓冲区里面。每个客户端都有两个输出缓冲区，一个缓冲区是固定大小，一个是可变的。
				固定大小的缓冲区保存长度较小的回复，如“OK”，整数值，错误回复等，通过buf和bufpos实现。
				可变大小的缓冲区用于保存长度比较大的回复，通过list *reply实现。
			f).身份认证
				用于记录客户端是否通过身份验证。
				0表示未通过，1表示通过。
				若服务器启用了身份验证功能，该属性将会启用，否则不会使用。
				服务器启用身份验证功能后，对于未认证客户端，客户端除了AUTH指令以外，其他指令全部拒绝。
			g).时间
		2).客户端的创建与关闭
			a).普通客户端
				创建客户端较为简单，就是客户端发出connect请求，服务器接收到后调用连接事件处理器。
				关闭客户端：
					- 客户端进程退出或者被杀死，客户端关闭。
					- 客户端发送不符合协议格式的命令请求，客户端关闭。
					- 客户端称为了CLIENT KILL的目标，客户端关闭。
					- 客户端设置了timeout选项，当客户端空转时间超过了timeout，客户端将被关闭。
					- 客户端发送的命令请求的大小超过了输入缓冲区的限制大小(1G)，客户端立即关闭。
					- 发送给客户端的响应超过了输出缓冲区的限制大小，那么客户端被关闭。
						虽然输出缓冲区是可变的，但是为了避免回复过大，占用服务器过多资源，会做限制：
							# 硬性限制，当超过了硬性限制，服务器立即关闭客户端。
							# 软性限制，记录超过软性限制的时间(obuf_soft_limit_reached_time)，若在一定时间内始终超过软性限制，则关闭客户端。
						硬性限制 软性限制 和 软性限制检测时间 都是可以配置的。

			b).Lua脚本伪客户端
				服务器会在初始化时，创建一个负责执行Lua脚本命令的伪客户端，即专门用来执行Lua脚本的进程。
				Lua脚本的伪客户端关联在redisServer的lua_client属性上。
			c).AOF伪客户端
				服务器载入aof文件时，会创建用于执行aof文件中redis命令的伪客户端，并在载入完成后，关闭这个伪客户端。
三、多机数据库的实现
	1.复制
		通过SLAVEOF，让一个服务器可以去复制另外一个服务器。主从服务器保存相同的数据，被称为“数据库状态一致”。
		1).复制过程
			复制是为了保证从服务器和主服务器从不一致到一致，并且保持后续状态一致的操作。
			复制主要分了两个部分：同步和命令传播。
			a).同步
				同步主要发生在两个时刻：
					* 初次复制，从服务器和主服务器之间曾经没有任何联系，完全是新的复制。
					* 断线后复制，建立连接后，网络中断，在网络恢复以后重新连接，继续复制主服务器。
					对于老版本而言，同步采用SYNC命令，即：
						# 从服务器向主服务器发送SYNC命令。
						# 收到SYNC命令的主服务器开始执行BGSAVE，并且从此时开始有一个缓冲区用于记录在RDB文件生成好前执行的所有写命令。
						# 主服务器的BGSAVE执行完成以后，将生成好的RDB文件发送给从服务器，从服务器接收并载入该RDB文件，并将数据库状态更新。
						# 主服务器将记录在缓冲区里面的所有写命令发送给从服务器，从服务器执行这些写命令，将自己数据库状态更新至主服务器数据库当前所处的状态。
					老版本不管是初次复制，还是断线复制，都采用SYNC指令。对于断线复制不应该采用这也的策略，新版本(redis 2.8)采用的PSYNC命令。
					PSYNC对于初次复制，采用【完整同步】，该策略和SYNC相同，但是对于断线后复制采用【部分重同步】策略。即：
						# 如果服务器以前父之过任何主服务器，或者之前执行过SLAVEOF no one命令，那么从服务器在开设一次性的复制时将想主服务器发送
						  PSYNC ? -1命令，【主动请求】主服务器进行【完整同步】。
						# 如果从服务器已经复制过某个主服务器，那么从服务器在开始一次性的复制时，向主服务器发送PSYNC <runid> <offset>命令。
						  其中runid是上一次主服务器id，offset则是从服务器当前的复制偏移量，接收到命令的主服务器会根据这两个参数来判断执行什么操作。
						# 服务器由以下几种回复：
							+FULLRESYNC <runid> <offset>，那么表示主服务器将于从服务器执行完整同步操作，runid是主服务器id，offset则是主服务器当前的复制偏移量。
							+CONTINUE，表示主服务器将于从服务器进行部分同步操作。
							-ERR，表示主服务器版本低于redis2.8，不支持PSYNC。
					部分重同步的具体过程在下面给出。
			b).命令传播
				命令传播是在主从服务器保持一致时，主服务器接收到写命令时，对主从一致性的继续维持。当主服务器接收到了写命令，会【异步】的将这些命令
				发送给所有的从服务器。由于是异步的，因此是可能会有丢失。但是由于采用了1秒周期性同步，因此就算丢失不一致性最多维持1秒。
		2).部分重同步
			有4个关键参数：
				主服务器的复制偏移量(maser-offset)
					主服务器每次想从服务器传播N个直接前，先给自己的复制偏移量上加N。
				从服务器的复制偏移量(slave-offset)
					从服务器每次接收到主服务器传播来的N个直接的数据时，就在自己的复制偏移量上+N。
				主服务器的复制积压缓冲区
					主服务器有一个固定大小的FIFO缓冲区用于保存写指令，大小可设置，默认为1M。
				主服务器的运行ID
					从服务器会保存主服务器的运行ID(run ID)。
			master-offset和slave-offset一致时，代表主从服务器状态一致，否则不一致。
			当从服务器重新连接上主服务器后，会将run id和slave-offset发送给主服务器，主服务器用于判断是否一致。若不一致，则将需要的数据从缓冲区里面提取出来发送给从服务器。
			但是，若掉线天就，所需要的数据已经超出了缓冲区存储的，那么就会触发服务器BGSAVE，发送RDB给slave。
		3).心跳检测
			在命令传播阶段，从服务器默认会以每秒1次的频率，向主服务器发送命令：REPLCONF ACK <slave-offset>。
			用以检测主从服务器的网络连接状态，辅助实现min-slaves，检测命令是否丢失。
			a).由于命令传播是异步的，因此可能会有丢失，通过这个方式用来周期性的检查slave和master的状态是否一致，若不一致则进行部分重同步。保证不一致性不超过1s。
			b).Redis可以防止主服务器在不安全的情况下执行写命令，通过min-slaves-to-write和min-slaves-max-lag来判断是否安全
			   若slave的个数少于min-slaves-to-write 或则 min-slaves-to-write个从服务器的延迟(lag)值都大于或等于min-slaves-max-lag则不安全，master会拒绝写指令。
			   master通过心跳检测技术来得悉slave的个数和各自的延迟。
			由于redis2.8以前，不存在slave-offset，因此2.8以前的版本是无法避免不一致情况发生的。
	2.Sentinel
		有一个或多个Sentinel实例组成的Sentinel系统，该系统可以监听多个master，当master下线时可以选举出一个slave代替master。
		1).初始化
			Sentinel是特殊状态的redis，所以首先是初始化普通的redis服务器。接着将redis使用的代码和命令表切换为sentinel使用的代码和命令表。
			初始化Sentinel状态在sentinelState结构中保存。
			struct sentinelState{
				uint64_t current_epoch;			// 当前纪元，用于选取领头
				dict *masters;					// 记录了当前sentinel检测的master，key是ip:port, value是sentinelRedisInstance。
				...								// 其他的属性，这里暂不介绍
			};
			接着初始Sentinel监视的master属性
			typedef struct sentinelRedisInstance{
				int flags;						// 标识值，比如主观下线
				char *name;						// 通过ip:port命名
				char *runid;					// master的运行id
				uint64_t config_epoch;			// 配置纪元
				sentinelAddr *addr;				// ip+port
				mstime_t down_after_period;		// master无响应时间，当超时后将会被该sentinel判断为主观下线
				int quorum;						// 该sentinel认为该master客观下线所需要的票数
				int parallel_syncs;				// 在执行故障转移操作时，可以同时对新的主服务器进行同步的从服务器数量
				mstime_t failover_timeout;		// 刷新故障迁移状态的最大时限
				dict *slaves;					// master的slave信息，key是ip:port, value是sentinelRedisInstance。
				dict *sentinels;				// 共同监听该master的sentinels，这组成了一个无形的分布式网络。key是ip:port, value是sentinelRedisInstance。
			}sentinelRedisInstance;
			通过配置文件可以配置一个sentinel的master属性，其中包括master的ip:port，master无响应时间，客观下线所需票数等等。
		2).获取必要信息
			a).获取主服务器信息
				sentinel会创建连接master的命令通道，作为获取master信息的渠道。
				sentinel默认每秒10次的频率，通过INFO来获取master的信息，这个指令也会获取到master的slave的信息！
				获取到master的runid和role域，一般不会对master的sentinelRedisInstance的属性做太大的更新。
			b).获取从服务器信息
				sentinel通过命令通道向master发送INFO指令，来获得每个master的所有slave信息。
				sentinel会通过命令通道和从服务器建立连接，目的是为后期故障转移选择更合适的slave。
			c).获取其他Sentinel的信息
				sentinel创建订阅通道和master和slave连接，作为获取其他Sentinel的渠道。
				Sentinel会订阅__sentinel__:hello频道，sentinel会通过命令通道向master和slave的该频道周期性的发送该sentinel的数据，默认为2s一次。
				发送的目的是为了告知其他监听了该master的sentinel自己(发送信息的sentinel)的存在。
				publish __sentinel__:hello "<s_ip>,<s_port>,<s_runid>,<s_epoch>,<m_name>,<m_port>,<m_epoch>"
				s开头的为sentinel的信息，m开头的为master的信息。
			最终 sentinel会通过命令通道和订阅通道与master和slave都建立连接，通过命令通道在sentinel之间建立连接。
		3).检测主观和客观下线
			默认情况下，sentinel会以每秒1次频率向所有与它创建了命令连接的实例(包括master，slave和其他sentinel)发送PING命令，来判断是否在线。
			如果一个实例响应超时(由该实例的down_after_period决定)，则在flags属性打开SRI_S_DOWN表示。
			当一个sentinel检测到了一个master下线了，为了确保真的下线，会想其他sentinel询问(通过SENTINEL is-master-down-by-addr进行询问)。
			其他sentinel回复他们的判断，此时发起询问的sentinel将认为其下线的票数和quorm进行对比，若大于等于该设定则认为其下线。
			为了避免脑裂情况，会强行发送kill进程去杀死master的redis进程。
		4).选举领头Sentinel
			采用raft算法，较为复杂。
		5).故障转移
			由选举出的sentinel完成以下工作：
				a).从slave中选择一个作为master
					选择的方式是：
						# 删除sentinel的slave列表中处于断线状态的slave，保证其他slave都是online的。
						# 删除列表中最近5s内没有UI福过Sentinel的INFO的slave，保证其他slave都是最近成功进行通信的。
						# 删除所有与前master连接断开超过down-after-milliseconds*10毫秒的服务器，保证其他slave数据比较新。
						# 根据优先级排序，选出优先级最高的slave。
						# 从最高优先级的slave中选出slave-offset最大，保证其数据最新。
						# 最后选出runid最小的slave作为master。
				b).让其他slave更新他们的主服务器
				c).前master重新上线后，将其设置为slave
	3.集群
		一个redis服务器的容量是有限的，可以通过redis集群进行横向扩展。
		槽是一个逻辑概念，一个节点拥有多个槽，一个槽又拥有多个kv对。
		1).集群关系的维护
			连接各个节点的工作通过CLUSTER MEET <ip> <port>命令来完成，指示将指定的节点加入到当前节点所在的集群中。
			a).维护关系的数据结构
				typedef struct clusterState{	// 记录集群的状态(当前节点的视角下，其他节点的视角下可能不一致)
					clusterNode *myself;			// 指向当前节点的指针
					uint64_t currentEpoch;			// 集群当前的配置纪元，用于故障转移
					int sate;						// 集群当前的状态(online or offline)
					int size;						// 集群中处理槽的节点数量
					dict *nodes;					// 集群中节点名单(包含myself)，key是节点的名字，value是节点的clusterNode结构。
					clusterNode *slots[16384];		// 集群中槽的指派信息，若槽i没有被分配则slots[i]为NULL，否则指向对应节点的clusterNode。
					zskiplist *slots_to_keys;		// 通过跳跃表保存槽和键之间的关系。目的是提供一个简单的反向索引
				}clusterState;
				
				struct clusterNode{				// 记录节点的状态
					mstime_t ctime;					// 创建节点的时间
					char name[];					// 节点的名字
					int flags;						// 节点标识(在线或者下线)
					uint64_t configEpoch;			// 配置纪元，用于实现故障转移
					char ip[];						// 该节点ip地址
					int port;						// 该节点的端口
					clusterLink *link;				// 当前节点到节点的连接信息
					unsigned char slots[16384/8];	// 该节点slot的bitmap，若拥有该槽则对应的bit为1否则为0
					int numslots;					// 该节点的槽个数
				};
				
				typedef struct clusterLink{		// 当前节点到目标节点的连接信息
					mstime_t ctime;					// 连接的创建时间
					int fd;							// 套接字描述符
					sds sndbuf;						// 输出缓冲区
					sds rcvbuf;						// 输入缓冲区
					struct clusterNode *node;		// 与这个连接相关连的节点
				}clusterLink;
				
				在clusterState中保存了当前节点认为的状态，其中包括了集群中所有的节点信息。
				节点信息通过clusterNode来进行保存，这里面通过clusterLink来保存当前节点和指定节点的连接信息。
			b).集群的建立
				在节点A上采用CLUSTER MEET <ip> <port>，会将目标节点B加入到A所在的集群。
				# A为B创造一个clusterNode结构，添加到clusterState.nodes中去
				# 节点A发送一条MEET消息给B
				# B接收到MEET消息，得知A已经知道了自己的存在，B也要保存好A的存在，因此创建A的clusterNode，添加到clusterState.nodes中去
				# B发送一条PONG消息给A
				# A返回B一条PING消息
				# B收到PING消息，握手完成
				# A节点会将B的信息通过Gossip协议传播给集群中其他的节点，让其他节点也与B握手，最终B加入到集群中
		2).槽指派
			redis集群的整个数据库被分为16384个槽，当所有槽都有节点再处理时，集群处于上线状态，否则处于下线状态。
			通过CLUSTER ADDSLOTS <slots> 用来给对应的节点分配槽。
			a).槽信息
				在clusterNode的slots和numslot中，保存了该节点的槽信息，分别是槽的bitmap和槽的个数。
				在clusterState的slots中，保存了集群的槽信息，若槽i被分配给了某个节点，则slots[i]指向该节点的clusterNode结构。
				通过clusterState.slots[i]的方式，可以很快的找到槽i被分配的节点。
				clusterNode.slots和clusterNodeState.slots都是有必要存在的，
				前者可以快速查询出槽i所对应的节点，方便进行重定向操作。
				后者方便传递当前节点的槽bitmap给其他的节点。
			b).槽信息的传播
				当节点收到来自客户端的CLUSTER ADDSLOTS指令后，先在自己节点的clusterNodeState.slots和clusterNode.slots进行配置。
				并将自己的clusterNode.slots数组发送给集群中其他的所有节点，让其他节点配置该节点的槽信息。
		3).集群接收指令工作流程
			客户端向集群中的任何节点发起命令，节点接收到命令，解析出命令要处理的key的所属槽，然后得到该槽所在的节点：
				若该槽就在当前节点，直接处理返回结果。
				否则，节点向客户端返回MOVED错误，指示客户端重定向到槽所在节点执行该指令。
			所属槽的计算slot_number(key) : CRC16(key) & (2^14-1)
			集群节点和单击模式的区别:
				# 节点只能使用9号数据库。
				# clusterState结构中有用slots_to_keys来保存槽和键之间的关系。这样可以提供一个槽到key的反向索引。
		4).重新分槽
			Redis集群的重新分槽，可以将任意数量的已经分配过的槽 从源节点分配到目标节点。主要是在已存在的集群中引入新的节点。
			* 在重新分槽的过程中，集群保持在线，并且源节点和目标节点都可以继续处理命令请求(通过返回的ACK错误实现)。
			i).redis-trib是Redis的集群管理软件，由其负责重新分槽：
				a). redis-trib对目标节点发送SETSLOT指令，让目标节点准备好导入属于slot的kv对。
				b). redis-trib对源节点发送SETSLOT指令，让源节点准备好将slot的kv对导出。
				c). redis-trib对源节点发送GETKEYSINSLOT指令，获取最多count个属于slot的kv对
				d). redis-trib对源节点发送一个MIGRATE指令，将被选中的kv对发送给目标节点。
				e). 重复cd两步，直到发送完毕。
			ii).解决分槽过程中的指令执行问题
				在分槽过程中，也是可以处理客户端命令请求的。
				当客户端向源节点发出关于key的命令，首先判断key是否存在于源节点数据库，若是则直接执行指令。
				若不存在与源节点数据库，且正在迁移key的槽i，那么就返回ASK错误，让客户端到目标节点上去执行与该key相关的指令。