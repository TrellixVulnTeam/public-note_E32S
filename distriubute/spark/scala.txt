一、概述
	Scala是基于JVM的编程语言，也就是说Scala源代码会被编译成class字节码文件。

二、基本
	1.变量和常量
		类型推断
		变量定义：var var-name = value
		常量定义：val val-name = value
		scala中对一个变量必须进行初始化，不能只声明。
	2.方法
		方法调用和Java类似：object.method(value1, value2, ...)，当参数只有一个时 可以简化为 object method value1
		方法名不受限制，任何字符串都可以成为方法名。
	3.函数
		object Test extends App{
			def add(a:Int, b:Int ) :Int = {
				a+b;					//函数默认返回最后一行表达式的值，并且有返回值的函数最后必须是表达式，不能是语句，否则报错。
			}
			var a = add(1, 2);
			var b = add(b=10, a=30);	//指定参数名传值
			println(a);
		}
	4.控制结构
		1).if，完全同Java
		2).while，完全同Java
		3).for
			for( i <= r){	//r应该是个Range/Array
				...			//每次循环i值为r中的一个值
			}
	5.常用数据结构
		1).定长数组Array
			var arr1 = new Array[Type](size);			//没有赋值的部分为0
			var arr2 = Array[Type](v1,v2,v3,...vn,);	//给定初始值，初始值受Type限制
			arr.mkString(splitString);					//将数组元素组成字符串，元素以splitString进行分割
			var arrbuffer = arr.toBuffer;				//获得对应的变长数组
			arr(index)
		2).变长数组ArrayBuffer
			var arr = ArrayBuffer[Type](.....);
			arr += newvalue;							//添加新元素
			arr -= oldvalue;							//删除元素
			arr ++= other_arr;							//添加other_arr的元素在arr的最后
			arr --= other_arr;							//在arr中删除oterh_arr的元素
			arr.toArray;
		3).不可变映射Map
			var map = Map[Type1, Type2](key1 -> value1, (key2, value2));
			map += ((key3, value3));						//添加kv对
			map += (key4 -> value4);					//
			map(key)									//取值
			map.contains(key)							//判断是否存在
			map.keys;									//获得map里面的所有关键词，返回的是Set类型
			map(key)=value;								//【错误】，这是不可变的
		4).可变映射mutable.Map
		5).元组
			var t = (1,2,3,4);
			t._index;			//取出第index元素，下标是从1开始的
			map的键值对就是通过元组实现的。
			元组用于函数值返回不止一个时。
		6).Range
			r = start-value to end-value 等价于 start-value.to(end-value)，闭区间
			r = start-value until end-value 等价于 start-value.until(end-value)，开区间
	6.类的基本内容
		class ClassName{
			var publicField = initial-value;
			@BeanProperty var beanField = initial-value;	//通过get和set方法来访问变量
			private var field = initial-value;			//除非声明private，否则都是public的
			
			def setField(field:Int){
				this.field = field;
			}
			
			def getField() :Int = {
				this.field;
			}
		}
		1.构造器
			a).主构造器
				class ClassName(var a:type, var b:type, ...){
					//code
				}
				
				object Test extends App{
					val o = new ClassName(a, b, ..);
				}
			b).辅助构造器
				class ClassName(var a:type, var b:type, ...){
					def this(var A:type, var B:type, ...){
						this(A, B, ...);		//必须要调用主构造器或者其他的辅助构造器
						....
					}
				}
		类中没有static
	7.对象的基本内容
		对象有两种生成的方式：
		1).new
		2).直接定义
			object Name{
				var value = 1;
				def method(){}
			}
			使用就在师姐用Name.method()即可。
			object 中的字段和方法也可以使用private。
			可以定义和该Name同名的类，该类中可以访问该Name对象中的private成员。这时称object Name为class Name的【伴生对象】。
			伴生对象可以为类提供类似static的使用。因为可以用Name.method()，这个Name即是对象名，也是类名，这就像调用static方法一样了。
			可以直接理解伴生对象就是将原来Java中的static方法集中写在一个地方。
三、高级知识
	1.高阶函数
		高阶函数其实就是将函数看作对象的处理方式，可以进行传递。
		def method(a:Int, b:Int){
			a + b;
		}
		var fun1 = add _;			//add _ 就是这个函数对象。
		var fun2 = (x:Int) => {		//匿名函数，匿名函数就是一个函数对象。
			x+2;
		};
		
		def fun3( f:(Int)=>(Int) ){	//这里f是一个函数对象，该函数对象的具体类型是(Int)=>(Int)，即指定该f是一个输入为Int，输出为Int的函数对象
			var b = f(a);
		}
	2.下划线
		1).获取元组的值
			tuple._(index)
		2).获取函数对象
			var fun = method _
		3).匿名函数简写
			对于一个匿名函数，可以进行简写
			匿名函数 (x:Int) => {x + 1};	
			简写 _ + 1;
			这个_就代表x。
			简写条件：
				a).只有一个形参
				b).函数体只有一行
	3.继承
		abstract class Person{
			val id:Int				//抽象字段，抽象字段可以不用初始值
			var name:String
			def show:Int			//抽象方法，抽象方法可以不用实现
		}
		
		class Student extends Person{
			override val id:Int = 1;
			override var name:String = "Jackson";
			override val show = 1;
		}