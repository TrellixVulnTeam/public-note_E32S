一 大型网站架构演化
    大型网站主要面对的挑战是超大量的用户访问和海量数据的处理。
    演化过程：
        1.初级阶段网站架构
            小型网站访问人数不多，将所有的业务放在一个服务器上即可。即将应用程序，文件存储和数据库都置于一台服务器之中。
        2.应用服务和数据服务分离
            将原本的服务器分成3块：应用服务器，文件存储服务器，数据库服务器。
            对于应用服务器，主要是业务处理，因此需要有较强的cpu。
            对于文件存储服务器，主要是存储海量数据，因此需要有较大的硬盘。
            对于数据库服务器，主要是数据的大量读写服务，因此需要较好的io服务。
            随着用户访问的增多，首先表现出压力大的是数据库。
        3.使用缓存个改善网站性能
            通常，80%的业务集中在20%的数据上，因此需要将这20%缓存起来，降低数据访问压力。
            缓存有本地缓存和分布式缓存，本地缓存速度更快，但是可以提供的容量更小，分布式缓存的伸缩性较好。
            随着用户访问的进一步增多，应用服务器会显得吃力。
        4.采用服务器集群改善网站的并发能力
            通过增加应用服务器来改善负载压力，应用服务器之间是较为独立的，因为http请求之间基本是无状态的，因此具备天然的可伸缩性。对于session问题可以通过分布式缓存弥补。
            主要的方式就是负载均衡。负载均衡又有多种实现方式：反向代理，dns，重定向等等。
        5.数据库读写分离
            虽然网站采用了缓存后，大部分操作可以不通过数据库完成，但是如果有很多未命中时仍然会访问数据库。
            通过将数据库进行复制，并配置为主从结构，实现数据库读写分离。
            应用服务器读数据会访问slave，写数据会访问master并将写操作扩散到slave。
        6.反向代理+CDN
            CDN即内容分发系统，将内容部署在网络提供商的机房，使用户在请求网站服务时，可以从距离自己最近的isp获取数据。
            反向代理可以缓存用户的请求资源。
        7.使用分布式文件系统和分布式数据库
            这两者都有较强的可伸缩性。
        8.使用NoSQL和搜索引擎
        9.业务拆分
            将网站业务分成不同的产品线，每个产品线由不同的团队负责。每个产品线业务都是一个应用服务器集群，产品线业务之间通过【超链接】或是【消息队列服务器】来衔接。
二 大型网站架构模式
    1).分层
    2).分割
    3).分布式
    4).集群
    5).异步
    6).冗余
    7).安全

三 核心架构要素
    架构，是最高层次的规划，最难改变的决定。这些规划和决定奠定了事物未来发展的方向和最终的蓝图。
    1.性能
    2.可用性
    3.可伸缩性
        主要是指可以通过增加相同的硬件使得业务的处理能力(吞吐量)得到提升。
    4.扩展性
        主要针对业务的易修改。
    5.安全性

四 高性能架构
    1.性能指标
        响应时间：执行一个操作需要的时间，包括从请求开始到最后想要数据所需要的时间。
        并发数：系统能同时处理请求的数目，反应了系统的负载性能。对于网站而言，指同时提交请求的用户数目。
        吞吐量：单位时间内处理的请求数。tps(每秒事务数)和qps(每秒查询书)是一个量化指标。该参数通常受响应时间和并发数影响。
    2.性能测试
    3.服务器优化
        1).分布式缓存
            缓存适合用来保存频繁使用的数据，但是不适合以下场景：
                a).频繁修改的数据【有误】
                    按原书的意思，只有读写比较高的数据才进行缓存。因为频繁修改的数据，在数据修改后还未访问就又进行修改，之前修改的数据就失效了，徒增系统负担。
                    但是我个人感觉不会增加系统负担，因为修改缓存的数据总比修改数据库中的数据要好。只需要后期再将缓存的数据同步到数据库即可，就算未同步到数据库时再度访问该数据，会直接访问内存里面的，不会有一致性问题。
                    我估计是这里没有考虑缓存的可用性，每次写操作都要更新数据库。
                b).没有热点的访问
                    所有数据的访问区域平均，趋于随机，无法缓存。
                c).缓存可用性
                    通常缓存都不是可靠的数据源。虽然现在也有热备手段。
                d).缓存穿透
                    对于没有缓存的数据，每次都要访问数据库，因此恶意攻击会利用这样的漏洞造成数据库访问频繁，容易宕机。
                    对于这样的情况，没有的数据也应该缓存起来，其值为null。
        2).异步操作
            传统处理方式是用户发送请求后，服务器处理完成，再返回给用户。
            在异步操作中，用户发送请求后，服务器将该请求封装交给消息队列服务器，然后直接返回用户。后端的服务器会取出消息队列中的消息进行实际的处理。这样可以削峰并增大吞吐量。
            需要注意，返回用户时，很可能请求还没处理完，而处理很可能会失败，因此处理结果需要通过别的业务方式让用户得知，比如邮件 短信 用户主动查询。
        3).使用集群
            这里主要指的负载均衡。
        4).代码优化
            a).多线程
            b).资源复用，主要指避免对开销很大的资源建立和销毁，例如对象池，连接池等。