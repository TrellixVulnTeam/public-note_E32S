一、安装和部署
    1.软件
        Nginx是一款免费开源的服务器产品，http://nginx.org/en/download.html可以找到unix和windows两个系统的nginx版本。
            Mainline version 是仍在开发不过已经可以使用的版本
            Stable version 是稳定的版本，可以进行商业化
            Legacy versions 是过去的版本
        由于一般在linux下搭建服务器，因此windows-nginx不讨论。
    2.安装和编译
        linux下面有两种安装途径:
            1).yum安装，这是最基本的安装，快速简单，提供基本的模块和功能，但是无法自由的扩展第三方模块
            2).编译安装，需要自行安装的模块，也可以编译自己的模块，便于扩展。
        安装依赖的第三方库:
            yum -y install
                gcc g++ automake        # 编译工具
                pcre pcre-devel         # 用于支持正则表达式
                zlib zlib-devel         # 用于支持gzip压缩
                open openssl-devel      # 用于支持https
            yum -y install gcc g++ automake pcre-devel pcre zlib-devel zlib openssl-devel open
        1).configure脚本
            这个脚本根据配置会生成一些C一些源码文件以及MakeFile文件。配置项包括对各类路径的指定，以及模块开关，在这个层面关掉的模块，是不会编译进入nginx。
                * --prefix=<path> nginx软件的安装目录，默认路径是/usr/local/nginx/
                * --sbin-path=<path> nginx可执行文件安装路径，默认路径是<prefix>/sbin/nginx/
                * --conf-path=<path> nginx的默认配置文件路径，默认是<prefix>/conf/nginx.conf
                * --pid-path=<path> nginx的pid文件路径，默认是<prefix>/logs/nginx.pid
##              * --lock-path=<path> nginx的锁文件，默认是/var/lock/
                * --error-log-path=<path> nginx的error.log路径，默认是<prefix>/logs/error.log
                * --http-log-path=<path> nginx的access.log路径，默认是<prefix>/logs/access.log
                ... 还有各类模块开关项
        2).Nginx编译安装
            ./configure <options>
            make                    # 根据configure生成的makefile和源文件，编译成二进制文件
            make install            # 将二进制文件部署到指定目录
        3).Nginx目录结构
            * conf      存放配置文件
            * html      存放预定义的html文件，包括nginx欢迎页面，错误页面
            * logs      日志文件
            * sbin      nginx启动文件
    3.nginx的控制
        1).最简单控制
            ./nginx             启动nginx
            ./nginx -c <cfg>    以指定的cfg文件启动nginx
            ./nginx -s stop     停止nginx,平衡停止Nginx服务
            ./nginx -s reload   nginx重新加载配置文件
        2).信号控制
            在获得nginx-master的pid后，可以通过信号来控制ngix的行为。
                * TERM/INT      快速停止Nginx服务
                * QUIT          平滑停止Nginx服务
                * HUP           使用新的配置文件启动nginx进程，再平缓停止原有nginx进程。即平滑重启, 等同于./nginx -s reload。
                * SGIUSR1       重新打开日志文件。
                * SIGUSR2       使用新的Nginx文件文件启动服务，原有Nginx进程不会停止，主要就是修改pid文件。
                * WINCH         平滑停止master的worker，worker工作完毕，worker才关闭。
        3).平滑升级
            kill -SIGUSR2 <pid>     开启新进程，修改pid文件
            kill -WINCH <pid>       将原worker的工作切换到新worker上，再平滑关掉指定master的worker。在发送这个信号前，可以随便关掉新开的进程。
            kill -QUIT <pid>        平衡关掉指定master

二、Nginx配置基础
    include 可以引入某个文件到配置文件
    1.nginx配置文件包含了多个文件块，常用的有：
        1).全局块
            也就是最外层的文件块，主要是Nginx整体运行情况。
            * worker process <number>, worker进程数量
            * pid <pid-file>, pid文件存放路径
            * error_log_file <file> <level>, 设置错误日子的存放路径，以及错误输出级别，默认为error级别
        2).events块
            主要用作与Nginx服务器与用户的网络连接。
            * accept_mutex on|off, 多个进程监听同一个socket是否上锁，如果不上锁，可能会带来惊群现象。默认打开
            * user <method>, 事件驱动模型，默认为epoll
            * worker_connections, 设置每个worker的最大连接数
        3).http块
            用于配置http功能相关的
            * access_log <file> <format>, 也可以作用于server和location块。请求访问完成后将会记录访问日志。
            * log_format <name> <string>
            * sendfile on|off, 开启或者关闭sendfile()传输文件，默认为off。http+server+location
            * sendfile_max_chunk <size>, sendfile()传输的文件不能超过<size>。设置为0，无限制。默认为0。http+server+location
            * keepalive_timeout <timeout>[header-timeout], 服务器长连接超时时间，超时了服务器断开连接。会加一个在http的response-header中，用来指示服务器的长连接断开时间。http_server+location
            * keepalive_request <number>, 单连接请求上限。某个长连接允许用户发送请求的最大次数。http+server+location
        4).server块
            server嵌套在http中 用于配置虚拟主机，虚拟主机是一个二元组(server-name, server-port)，通过请求的域名和端口，将请求路由到各自的server。
            * listen <address>[<port>] [default_server], port默认为80，address是具体监听的ip地址(一个机器有多个网卡，就有多个ip)。
                 default_server代表将address:port设置为虚拟主机。defautl_server对于同一个ip和port，只能有一个配置该选项。若都没有配置，则一第一个ip:port的server为default_server.
            * server_name 虚拟主机域名，请求的域名和server_name匹配时将会路由到这个server块。若请求是直接用的ip地址，需要看是否有配置default_server。
            * error_page code
        5).location块
            请求路由到server后，会将uri和location的进行匹配，将请求交给最合适的location块进行处理
                location [ = | ~ | ~* | ^~] uri { ... }
            uri是待匹配字符串，[*]中的东西是确定如何与uri进行匹配的。
                无, 表示先从标准url中找到匹配对最高的，然后用正则url找第一个匹配的，匹配完成退出。没有在正则url中找到，则用标准url中匹配度最高的。
                =, 要请uri完全匹配，如果匹配成功，停止往下搜索。
                ~, 表示uri中包含了正则表达式，区分大小写。
                ~*, 表示uri中包含了正则表达式，不区分大小写。
            * root, 用于静态服务器，当匹配uri后，将root作为前缀，和uri进行结合，定位到资源。
            * alias, 用于静态服务器，当匹配uri后，将定位到alias所指向的资源。
            * index, 没有在uri中写具体资源时，将会定位到index的资源。index资源的相对路径时root路径。
            * allow <address> | all, 运行访问的ip, 默认时全部运行
            * deny <address> | all, 拒绝访问的ip
            * proxy_pass 反向代理。如果uri用了正则表达式，那么proxy_pass不能指定uri部分。

三、Nginx的模块与架构
    1.模块分类
        ngx_modules.c是configure脚本运行的输出文件，其中包含了会编译的模块
            * 核心模块
                包括进程管理，错误日志，权限控制等必不可少的模块。
            * 标准HTTP模块
            * 可选HTTP模块
            * 邮件服务模块
            * 第三方模块
        按前文所述的编译方式，会将核心模块和标准http模块编译到nginx中
    2.请求处理机制

四、性能优化
    1.Linux内核参数(/etc/sysctl.conf)
        * net.core.netdev_max_backlog
        * net.ipv4.tcp_synbac_retries, 作为服务器，内核放弃连接之前，向客户端返回的syn+ack的数量
        * net.ipv4.tcp_sync_retries, 作为客户端，内核放弃连接之前，向服务器发送的syn数量
    2.CPU性能参数(nginx.conf)
        * worker_process, worker进程数量，和cpu核数相同最佳。在最外层块配置。
        * worker_cpu_affinity, 将核与worker绑定，避免不同的worker抢占同一个核。在最外层块配置。
    3.网络连接配置(nginx.conf)
        * keepalive_timeout <timeout> <header-timeout>, 长连接超时时间和希望客户端关闭长连接的超时时间。通常第一个值>第二个值(避免由于服务器先关闭，带来time_wait)。
        * send_timeout, Nginx发送数据以后，若客户端超过该时间没有回复，服务器关闭连接。
        * client_header_buffer_size, 允许的客户端header的大小，默认为1KB。(若超过，会弹400的错误)
        * client_body_buffer_size, 允许的客户端body的大小。32位系统默认为8KB，64位系统默认为16KB。
        * multi_accept, Nginx是否尽可能多的接收网络连接请求，默认为false。
    4.events的配置
        * use, 指定Nginx服务器使用的事件驱动模型，linux默认为epoll
        * worker_connections, 每个worker允许的最大连接数
            这个配置需要注意下，最大连接数不能大于每个进程运行打开的文件句柄数量。
            每个进程的文件句柄数量，在/proc/sys/fs/file-max中配置, sysctl -p使能配置
#        * worker_rlimit_sigpending，事件信号队列长度。事件信号队列用来缓存客户端请求发生信号。若超过上限，转换成poll处理客户端请求。
        * epoll_events, 表示epoll模式下，内核与nginx服务器之间可以传递信号的数量。

五、Gzip压缩
    gzip用于对响应进行压缩，相关的指令可以在http,server,location块中进行配置。Nginx通过ngx_http_gzip_module、ngx_http_gzip_static和ngx_http_gunzip_module进行配置。
    1.ngx_http_gzip_module
        * gzip on/off, 用于关闭或者开启gzip模块功能，默认为off关闭的
        * gzip_buffers number size, 用于设定gzip压缩时向系统申请number * size大小的空间进行存储压缩数据
        * gzip_comp_level level, gzip压缩程度级别，级别越高越耗时，压缩的越小
        * gzip_min_length length, 当响应内容的长度超过该值了才进行压缩。响应内容通过Content-Length获取，若采用的chunk，则该指令不起作用
        * gzip_disable regex ..., 针对不同类型客户端请求，可以选择性的开启和关闭gzip功能
        * gzip_proxied <value>, 设置是否对后端返回的响应进行gzip
            * off, 关闭对后端服务器返回的结果进行gzip，默认设置。
            * expired, ...
            * any， 无条件对响应数据进行gzip
        * gzip_types <mime-type>, gzip针对指出的响应类型进行，默认是text/html, 可以通过gzip_types *来支持所有类型。
#        * gzip_vary on/off, 在响应头中添加信息，用于告诉接收方数据经过了压缩处理。默认设置为off。

    2.ngx_http_static_module, 用于静态压缩
        * gzip_static on/off, 用于开启或关闭该模块功能, 默认为关闭
        * 其他指令与ngx_http_gzip_module的相同
        * gzip_proxied
    3.ngx_http_gunzip_module

五、Rewrite
    1.服务器组配置
        * upstream <name> {}, 后端服务器集群列表指令， 在http块中。
        * server <address> <parameter>, 集群内的机器配置,<address>包括ip和端口.<paramter>：
            * weight=number, 负载均衡RR权重，默认为1
            * fail_timout=time, 当在该时间内，nginx连接服务器错误了一定次数(max_fails)，则任务机器无效，并在这段时间内不再检查机器状态。默认为10s
            * max_fails=number, 一定时间范围内(fail_timout)，若请求失败次数达到该值，则认为服务器无效，默认为1
            * backup, 设置服务器作为备份用。只有在所有非backup计算机处于无效和繁忙状态时，才能用来处理客户端请求
            * down, 将服务器标记为下线
        * ip hash， 在upstream块中，标识通过nginx进行负载均衡
    2.辅助配置
        rewrite支持正则表达式，需要有pcre库的支持。
        * if (<condition>) { ... }, 条件为真时采用该配置。位于server或者location块中。
        * break, 中断当前配置块的后面的配置项
        * return, 完成对请求的处理，直接返回客户端响应, 有三种形式:
            * return <status-code>
            * return <status-code> <url>   ,返回状态码，并进行重定向(客户端会感觉状态码才决定石否进行重定向的)
            * return <url>, 进行重定向
        * set <var> <val>, 设置新变量
        * uninitialized_variable_warn on | off, 使用未初始化变量时，是否记录警告日志，默认为开启(on)的
        * rewrite_log on | off, 是否开启URL重写日志功能
    3.rewrite
        rewrite <regex> <replacement> [flag];
            * regex, 用于匹配uri的正则表达式，这个正则表达式不包含请求的host和请求的get参数。
            * replacement, 匹配成功后，用于替换uri中被截取的字符串
            * flag是对uri更新后的行为选择
                * last, 停止在当前location中处理接收到的uri，将新的uri重新寻找location
                * break, uri仍在当前location中进行处理
                * redirect, 将重写后的uri返回给客户端进行302重定向
                * permanent, 将重写后的uri返回给客户端进行301重定向
六、反向代理配置


# nginx常用内置变量
* $remote_addr 客户端ip地址
* $remote_port 客户端端口