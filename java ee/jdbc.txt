一、使用配置信息
	1.文件db.properties:
		driver=com.mysql.jdbc.Driver
		url=jdbc:mysql://localhost:port/database-name
		user=root
		password=123
	2.程序读取
		//注意，在MyEclipse中，无论java程序在哪个位置，默认当前路径就是java项目根路径(非src下)。
		FileReader reader = new FileReader(db.properties);
		Properties pro = new Properties();
		pro.load(reader);	//将文件加载进去,会自动创建Map<String,String>
		reader.close();
	3.使用配置文件注册
		Connection conn = null;
		Statement stmt = null;
		Result rs = null;
		//从配置文件获取数据
		String driver	= pro.getProperties("driver");
		String url		= pro.getProperties("url");
		String user		= pro.getProperties("user");
		String password	= pro.getProperties("password");
		try{
			Class.forName(driver);	//注册驱动,应该是在静态语句块下有些操作。通过反射来注册，可以避免在当前java文件中引入多余的包。
			conn = DriverManager.getConnection(url, user, password);	//建立连接
			stmt = conn.createStatement();								//获取数据库操作对象
			String sql = "......";
			stmt.executeQuery(sql);		//执行查询的sql语句。
			stmt.executeUpdate(sql);	//执行修改表的操作。
		}catch(Exception e){
			...
		}
二、PreparedStatement
	执行的sql被恶意篡改造成的。主要是输入的内容和底层sql语句拼接在一起，造成sql语义的改变。
	例如sql语句:
		select * from t_user where username='<name>' and password='<pwd>'
		若<pwd> == abc' or 'a' = 'a
		那么生成的sql语句将是
		=>select * from t_user where username='<name>' and password='abc' or 'a'='a'
		=>select * from t_user
	其实由于输入的内容里面包含了sql关键字，编译是对这些进行整体编译的。
	可以进行预先编译，而后提供输入内容, 避免对后续的输入做编译。
		sql = "select * from t_user where username=? and password=?";
		ps = conn.prepareStatement(sql);		//先将sql语句进行预编译
		ps.setString(1, username);
		ps.setString(2, userpwd);
		rs = ps.executeQuery();
	PreparedStatement优点：
		* 编译一次，执行n次，效率较高。（传统方式是编译n次执行n次）
		* 编译期会检查类型，确保类型安全。(因为用ps.setString来显示设置字符串)

三、CRUD
	1.Create 增加
		String sql = "insert into dept(deptno, dname, loc)values(?,?,?)";
		ps = conn.prepareStatement(sql);	//预编译
		ps.setInt(1, 60);
		ps.setString(2, "销售部");
		ps.setString(3, "北京");
		int count = ps.executeUpdate();
		
	2.Retrive 检索
		...
		rs = ps.executeQuery();
	3.Update 修改
		String sql = "update dept set dname=?, loc=? where deptno=?";
		ps = conn.prepareStatement(sql);	//预编译
		ps.setString(1, "人事部");
		ps.setString(2, "南京");
		ps.setInt(3, 60);
		int count = ps.executeUpdate();
	4.Delete 删除
		String sql = "delete from dept where deptno=?";
		ps = conn.prepareStatement(sql);	//预编译
		ps.setInt(1, 60);
		int count = ps.executeUpdate();

四、事务
	1.默认情况
		JDBC默认情况下，在没有设置事务的前提下，事务采用的是默认自动提交。
		也就是说，执行一次的dml语句，就提交一次。
	2.事务手动提交
		conn.setAutoCommit(false);	//不再支持自动提交。
		try{
			....
			conn.commit();
		}catch(Exception e){
			if(conn==null){
				try{
					conn.rollback();	//发生异常，则回滚
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
		}
五、悲观锁
	多线程访问同一个数据库中同一张表中向同行的记录的时候，希望这些线程排队执行。
	第一种解决方案 : synchronized
	第二种解决方案 : 串行化
	第三种解决方案 : 悲观锁(行级锁)
	
	在dql语句在事务没有结束之前，查询的记录已经被锁定，其他事务无权操作。
	
	其实很简单，只需要用"select ... for update"，就采用了行级锁。
	其他事务在修改这些被锁住的数据时，会阻塞进程。