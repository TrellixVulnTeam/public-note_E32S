一、struts
	struts2需要运行在jre1.5及以上版本
	1.与struts的比较
		1).Actioin类
			struts1的Action必须继承
			struts2的Action不必继承
		2).线程安全
			struts1是单例的
			struts2是多例的
		3).Servlet API依赖
			struts1的Action需要依赖Servlet API(HttpRequest, HttpResponse)
			struts2的Action不依赖Servlet API
		4).可测试性
			struts1的action 需要容器支持，所以不容易测试。
			struts2的actioin不依赖于容器，所以易于测试。
		5).ActionForm
			struts2没有ActionForm，直接用action来收集数据。也因此struts2必须是多例的。
		6).类型转换器
			struts1对ActionForm类型转换使用beanUtils
			struts2使用OGNL
		7).Action执行控制
			struts1固定不变
			struts2通过拦截器，可以改变执行流程
	2.配置
		1).web.xml
			配置核心的控制器，用于请求的转发，就和struts1中的servlet一样。struts2是用filter作为控制器的。
			在web.xml中配置
			<filter>
				<filter-name>struts2</filter-name>
				<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
			</filter>

			<filter-mapping>
				<filter-name>struts2</filter-name>
				<url-pattern>/*</url-pattern>  
			</filter-mapping>

			
		2).创建Action
			struts2可以直接创建一个普通类，不继承和实现任何类和接口。因此struts2是个pojo类。
			action的缺省方法名称：public String execute() throws Exception
			action中提供getter和setter方法，方便收集表单数据。其实就是将struts1中的ActionForm的功能将Action结合到了一起。

		3).struts.xml
			在src中配置struts.xml
			<?xml version="1.0" encoding="UTF-8"?>
			<!DOCTYPE struts PUBLIC
			"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
			"http://struts.apache.org/dtds/struts-2.3.dtd">
			<struts>
				<!-- 必须要继承这个包，这个包提供基本的struts2的包的能力 -->
				<package name="struts2" extends="struts2-default">
					<action name="login" class="LoginAction">
						<result name="<ret-value1>"><uri></result>
						<result name="<ret-value2>"><uri></result>
					</action>
				</package>
			</struts>

二、struts2配置
	1.struts.configuration.xml
		默认为false, 配置文件默认就在servlet启动时读一次到内存，若配置文件进行了修改，需要重新启动。
		当然也可以修改为true，这样配置文件一经修改，就重新加载。
		可以在struts.properties中设置
	2.result
		<result>标签的name属性，如果不配置，默认为success。
		<result>标签的type属性，默认为dispatcher，表示转发。
		若将type设置为redirect，则会重定向到任何web资源。
		若将type设置为redircetAction，可以重定向到Action，不需要写后缀。
	3.Action接口
		该接口中提供了一些常量和execute方法
		可以实现接口: class MyAction implements Action{} 这样可以确保方法名没错。
		Action的返回值建议用变量名，而不是用字符串，可以保证每输错。SUCCESS ERROR字符串。
	4.struts2常用配置参数
		1).struts.configuration.xml=true, 当struts2的配置文件别修改，会立即加载。在生生产环境下最好不要配置，这样就不稳定了。
			a).在struts.xml中进行配置
				<constant name="struts.configuration.xml" value="true" />
			b).也可以在struts.properties中设置
		2).struts.devMode
			提供更加友好的提示信息
			<constant name="struts.devMode" value="true" />
		3).struts.i18n.encoding
			设置字符集
			<constant name="struts.i18n.encoding" value="GB18030" />
	参数配置建议都在struts.xml中，这样统一方便。
	4.团队开发支持(多配置文件)
		按模块来进行开发, 在struts.xml中统一引入各个模块
		<include file="<config xml-name>" />
		这样可以将指定的配置文件引入，为某个模块建立单独的配置文件，方便模块之间独立开发。
		这个模块配置文件需要和struts.xml的格式一样。
		
三、ModelDriven
	这其实是一个拦截器，用于设置表单的值到java属性中。
	ModelDriven这个拦截器会将action中的模型取出来，进行赋值。这个模型就相当于struts中的ActionForm了。
	class MyAction extends ModelDriven{
		private User user = new User();
		
		public User getModel(){
			return user;
		}
		
		public String execute() throws Exception{
		}
	}
	也就是说
	1.创建对象
	2.Action实现ModelDriven接口
	3.实现getModel()方法
	
四、Servlet API
	1.通过ActionContext访问Servlet API
		此方法没有侵入性。
		1).session
			ActionContext.getContext().getSession.put("<key>", "<value>");
			ActionContext.getContext().getSession.get("<key>");		将数据从session中读出
		2).request
			ActionContext.getContext().put("<key>", "<value>");		将数据设置到request中
			ActionContext.getContext().getParameters().get("<key>");从request从读取数据
	2.实现装配接口，完成对ServletAPI的访问
		ServletRequestAware取得HttpServletRequest
		ServletResponseAware取得HttpServletResponse
		public class MyAction implements Action, ServletRequestAware, ServletResponseAware{
			private HttpServletRequest request;
			private HttpServletRequest response;
			
			public void setServletRequest(HttpServletRequest request){
				this.request = request;
			}
			
			public void setServletResponse(HttpServletRequest response){
				this.response = response;
			}
		}
	3.通过ServletActionContext提供的静态方法去的Servlet API
		getPageContext();
		getRequest();
		getResponse();
		getServletContext();
		
五、命名空间
	1.使用
		为了避免在多人开发等场景下action的name重了。
		采用命名空间，可以区分不同的包下，相同的Action名称
		<package name="<package-name1>" extends="struts2-default" namespace="<namespace1>">
			<action name="<action-name>" ..>
			</action>
		</package>
		
		<package name="<package-name2>" extends="struts2-default" namespace="<namespace2>">
			<action name="<action-name>" ..>
			</action>
		</package>
		若不加namespace，则无法区分同名的action，因为name直接关联着action的路径。相同路径(同名)的action是无法区分的。
		使用namespace，则会由namespace和name共同决定action的路径，因此可以区分。uri: .../namespace/name.action
		namespace默认为空。
	2.namespace的搜索顺序:
		首先在当前的【命名空间】下查找name对应的action，如果找到了此action，如果没有找到，就到上次目录的action中查找，直到根。
		
六、Action中多个方法调用
	1.方法的动态调用
		public class MyAction extends ActionSupport{
			public void method1(){
			}
			
			public void method2(){
			}
		}
		ActionSupport具备一个缺省的execute实现。方法动态调用不用编写execute的。
		调用的uri是:.../<name>!<method-name>.action
	2.在<action>中配置method属性
	3.使用通配符
	
七、文件上传
	struts2默认采用了apache commons-fileupload
	struts2支持3种类型的上传组件
	1.需要引入commons-fileupload相关jar包：
		commons-io-1.3.2.jar
		commons.
	2.上传前端
		<form action="" method="post" enctype="multipart/form-data">
			<input type="file" name="myfile">
			<input type="submit" value="submit">
		</form>
		method 和 enctype 必须用上述的方式。
	3.Action配置
		class MyAction{
			private String <form-file-name>FileName;	//得到上传文件的名称
			private String <form-file-name>ContentType;	//得到内容类型
			private File <form-file-name>;				//得到文件数据
			
			public String get<>FileName(){..}
			public String put<>FileName(String myFileFileName){..}
			public String get<>ContentType(){..}
			public String put<>ContentType(String fileContentType){..}
			public File get<>(){..}
			public File put<>(String myFileFileName){..}
		}
		
八、struts2的类型转换器
	方便实现 表单数据 到 自定义对象 转换
		
	1.实现类型转换器
		继承StrutsTypeConverter
		覆盖convertFromString和convertToString
	2.注册类型转换器
		1).局部类型转换器
			<ActionName>-conversion.properties, 该配置文件必须和Action放到同一个目录中。
			<Action中的属性名>=<convert-class-name>	指定对应的name应该使用什么转换器
		2).全局类型转换器
			xwork-conversion.properties, 放到src下
九、国际化
	1.配置basename
		在struts.xml中配置
		<constant name="struts.custom.i18n" value="Message" />
	2.提供国际化资源文件
		国际化资源文件放到src目录下，以basename作为前缀。
	3.引入标签
		<%@ taglib uri="/struts-tag" prefix="s" %>

十、异常处理
	1.局部异常
		<action ..>
			<exception-mapping result="<result-name>" exception="<exception-name>" />	在当前action中，若出了对应的异常就跳到对应的result-name的网页中。
			<result name="<result-name>"> <uri> </result>
		</action>
	2.全局异常
	<global-results>
		<result name="<result-name>"> <uri> </result>
	</global-results>
	
	<global-exception-mappings>
		<exception-mapping result="<result-name>" exception="<exception-name>" />	出了对应的异常就跳到对应的result-name的网页中。
	</global-exception-mappings>
	
十一、拦截器
	filter是任何请求都能拦截，struts2的拦截器只能拦截action，因为是action才会创建proxy，才会去初始化并执行拦截器。
	拦截器是AOP的一种思路，可以使系统架构更松散，可插拔。
	1.实现
		* 继承AbstractInterceptor
		* 实现intercept
		public class MyInterceptor extends{
			@Override
			public String intercept(ActionInvocation invocation){
				
				System.out.println("action执行前");
				String ResultCode = invocation.invoke();	//继续执行 调用后面的拦截器, 若没有拦截器了，会调用action
				System.out.println("action执行后");
				
				return ResultCode;
			}
		}
	2.注册类型转换器
		<package>
			<interceptors>
				<!-- 定义记录拦截器 -->
				<interceptor name="MyInterceptor" class="<interceptor-class-name>"></interceptor>
			</interceptors>
			
			<action ...>
				<!-- 这里的拦截器声明顺序，就是执行的顺序 -->
				<interceptor-ref name="defaultStack" />		<!-- 引用默认的拦截器 -->
				<!-- 引用拦截器 -->
				<interceptor-ref name="myInterceptor" />
				...
			</action>
		</package>
		注意，如果action引用了自定义的拦截器，则不会用默认的18个拦截器，需要额外再对默认拦截器作引用。
	3.定义拦截器栈
		<package>
			<interceptor-stack name="<stack-name>">
				<interceptor-ref name="defaultStack" />
				<interceptor-ref name="myInterceptor" />
			</interceptor-stack>
		</package>
		若将<stack-name>定义为defaultStack，那么package将会默认使用这个拦截器
	4.拦截器原理
		在ActionInvocation中有一个成员变量Iterator，这个Iterator中保存了所有拦截器。
		每次都会取得Iterator进行next，如果找到了拦截器就会执行，否则就会执行Action，都执行完了出栈。