一、基础
	python可以定义为面向对象的脚本语言。脚本倾向于顶层代码文件，程序描述相对复杂的代码文件。
	python的缺点是相比c/c++而言，执行速度不够快。
	1.python的能力：
		# 系统编程，对操作系统服务的内置接口，可以替代shell进行操作系统的管理和维护。
		# GUI
		# Internet脚本
		# 组件集成
		# 数据库编程
		# 快速原型
		# 数值计算和科学计算编程
		# 游戏、图像、人工智能、XML和机器人。
	2.python的运行流程
		python首先编译.py文件为字节码，然后交给PVM(Python虚拟机)来运行。
		1).字节码
			当python开始运行时，若Python进程拥有在计算机上的写权限，那么会生成.pyc文件(.py文件编译后得到的字节码，非二进制代码)。
			.pyc保存在磁盘中是为了避免下次重新运行未修改的源代码时重新进行编译。
			通过源代码的修改时间，可以让Python得知源代码是否被修改，是否应该重新编译.py文件。
			另外，若不允许Python进程写计算机，那么会将字节码保存在内存中，并在程序结束是丢弃。
			且，就算是仅有.pyc也是可以运行起来的。
		2).PVM
			Python虚拟机不是一个单独的程序，它是Python系统的一部分。
			PVM是迭代运行字节码指令的一个大循环。
	3.运行python
		1).交互式解释器
			在命令行中输入python后回车，进入解释器模式，此时输入一行则进行一次执行。
		2).Python文件
			通过python <file-path>来运行对应的文件。
二、数据类型
	通过type(<var>)，可以得知变量所引用对象的类型。
	Python提供的基本数据类型有：
		# 布尔型(仅包含True和False)
			整数0，浮点数0.0，None，空字符串''，空列表[]，空元组()，空字典{}，空集合set()，通过bool()强制转换的结果都是False。
			其他bool()结果为True。
		# 整数 强制转换，int(<var>)，True转换成1，False转换成0，浮点数保留整数部分。需要注意的是在Python3中没有long，只有int，且int的范围不受限。
		# 浮点数(小数和科学计数法表示) 强制转换，float(<var>)，True转换成1.0，False转换成0.0，整数添加.0作为小数部分。
		# 字符串
			双引号或者单引号里面的部分就是字符串。之所以采用两种引号，是为了方便在内容本身就含有引号。不用像以前那样添加斜杠。
			可以通过三个单引号来创建多行字符串。
			Python的反斜杠\同样是转义字符。
			str(<var>)会将引用的对象转换为字符串。
			拼接：str1+str2+...来进行字符串拼接。
			复制：str*4来进行复制，结果和str+str+str+str等价。
			索引：str[]可以取其中的字符，且拉去出来的是不可变对象。
			替换：str.replac(ori, target), 生成一个新的字符串，会将原始的字符串改为目标字符串。str.replac(ori, target, times)
			分片：str[:]，提取从开头到结尾的字符串。[start:end] 提取从start到end的字符串。[start:end:step] 以step提取从start到end。当start和end为正数时，从左边开始算，为负数时从右边开始算。
			长度：len(str)。
			分割：str.split(<split-syb>)，通过指定的字符串来进行分割。得到列表。
			合并：主要是指将列表中的字符串合并在一起。'<str>'.join([o1, o2, o3])，相当于o1+<str>+o2+<str>+o3
	Python里面不管什么东西，全是【对象】。Python的变量全部代表的是【引用】，而非对象本身。
	在进行不同类型对象进行混合运算时，会尝试转换为精度更高的类型进行计算。
	print可以通过都好来将各个参数内容进行拼接。对于非字符串内容，会默认采用str()来进行强制转换。
三、容器
	1.数组
		在Python中有两种数组的形式，列表和元组。
		1).列表
			列表中可以保护任何类型对象的引用。
			创建：通过[ref1, ref2, ...]创建列表。当里面没有引用时，那么创建的是空列表。也可以通过list将非列表转换为列表，方式是Copyt-Write。
			索引：通过array[index]获取对应位置的元素。若index小于0，则从尾巴计数。0为第一个元素，-1为最后一个元素。
			长度：len(list)
			添加：通过list.append(ref)，将新的对象引用添加到末尾。通过insert(idx, ref)，将新的对象引用插入到指定位置。添加的元素也是copy-write。
			扩展：通过list.extend()或+=可以将多个列表扩。扩展的方式也是copy-write。
			删除：通过list.pop()，可以将末尾元素弹出，也会删除末尾元素。也可以通过pop(idx)，返回并删除指定索引的元素。del(idx)，只会删除指定索引元素，不会返回该元素。remove(ref),会在列表中删除该元素。
			定位：通过list.index(ref)，可以查询该元素第一个出现的索引。若不存在则返回错误。通过ref in list可以判断元素释放在列表中。
			排序：通过sorted(list)，可以返回一个排序好的list，输入的list不变。通过list.sort(),会对原list进行排序。
			复制：通过newlist=oldlist并非真正的复制，这个只是复制的引用，他们所代表的都是相同的集合。可以通过newlist=oldlist.copy() or oldlist[:] or list(oldlist)来创建新的对象。
			其他：
				通过count()可以记录元素出现的次数。
				通过join可以将列表转为字符串，不过用法是str.join(list)，合并后两两中间通过str连接。
				具备切片功能，list[start:end]。
				也可以通过var1,va2,...,varN=list进行多变量赋值，要求len(list)==N。即解包。
		2).元组
			元组创建以后不可修改，包括元组的大小，里面的内容均无法修改(引用无法修改，但是引用的对象还是可以修改的)。
			创建：通过(ref1, ref2, ...)创建元组，也可以省略括号。直接()可以创建空元组
			解包：其实就是多变量赋值，list也具备一样的功能。var1,va2,...,varN=tuple
	2.字典
		其实就是hashmap。
		创建：通过{key1:val1, key2:val2, ...}来创建字典。{}会创建空的字典。也可以通过dict([[key1, val1], [key2, val2], ...])来创建字典。key和val可以为任何对象的引用。
		添加和修改：通过map[key]=val，若key不存在于字典，可以在字典中添加新元素。若key存在于字典，则是进行修改。
		合并：通过map1.update(map2)，map2中的内容会拷贝到map1中，并且若map2和map1的key有重合，则以map2中的为准。
		删除：通过del map[key]，可以删除map中对应的kv对。通过map.clear，可以删除所有元素。
		复制：通过map.copy()的形式。
		所有键：
			map.keys()获取所有的key的迭代形式。 map.values()获取所有值的迭代形式。map.items()获取所有的kv对的迭代形式，kv对以元组形式存在。
			在Python2返回的是列表，在Python3返回的是迭代形式。返回迭代形式可以避免大map会创建列表耗费时间。
			通过list(迭代形式)，可以得到list形式。
		其他：
			通过key in map，可以判断是否存在该key。
	3.集合
		创建：空集合set()，或者{ref1, ref2, ...}。可以通过set(other-container)将其他容器保存的数据转换为集合。
		运算：
			a&b作交集运算(或a.intersection(b))，a|b作并集运算(或a.union(b))
			a-b作差集运算(或a.difference(b)，即返回a中存在b中不存在的元素)，a^b做异或运算(或a.symmetric_difference(b)，a和b不相交的部分)
			a<=b判断a是否为b的子集，a<b判断a是否为b的真子集
			a>=b判断a是否为b的超集，a>b判断a是否为b的真超集
四、基本语法
	在其他语言中，通常采用{}和begin-end来标志代码块。Python通过缩进来标明代码块。
	1.运算
		需要注意，逻辑运算是and和or。
	2.条件语句
		if <exp1> :
			<statement1>
		elif <exp2> :
			<statement2>
		else
			<statement3>
	3.循环语句
		1).while
			while <exp>:
				<statement>
				[break]			# 可跳出循环
				[continue]		# 循环体重新执行
			[else:
				<statement>]	# 循环正常退出时执行(即执行了while的判断不满足时，将会执行else)，break属于非正常退出。
		2).for
			for <item> in <iterable> ：
				<statement>
			<iterable>为可迭代对象，列表，字符串，元组，字典，集合都是可迭代对象。
			本质上和Java的for迭代类似，通过可迭代对象生成迭代器，遍历迭代器的每个元素。
			需要注意的是：
				字符串在这里的迭代每次访问一个字符。
				字典在这里的迭代每次访问一个key。
				统一可以采用break,continue,else。
			a).并行迭代
				for <var1>, <var2>, ... <varN> in <iterable> :
					<statement>
				当iterable的迭代器每次返回的元素是一个长度为N的列表或是元组时可以使用。在二维矩阵中，这相当于是每次返回一行的N个数到具体的变量中。
				可以通过zip()将多个列表组成一个二维的列表的迭代器：
					zip(list1, list2, list3)，该迭代器每次返回一个元组，第i次返回的元组为所有列表的第i个元素所组成的元组。迭代器元素的个数是最短列表的个数。
					比如list(zip([1,2,3],[4,5],[6,7]))，结果是[(1,4,6),(2,5,7)]
			b).range
				range(start, stop, step)，返回一个可迭代对象。
	4.推导式
		推导式可以快速创建列表，字典等数据结构。
		1).列表推导式
			list = [<exp> for <item> in <iterable> if <condition>];  # if <condition>可省略
			等价于
			list = [];
			for <item> in <iterable> :
				if <condition> :
					list.append(<exp>);
			即每次迭代，将满足条件的<exp>结果放入列表中。若省略if conditon，则所有的<exp>放入列表。
		2).列表推导式
			dict = {<key-exp>:<val-exp> for <item> in <iterable>}
			等价于
				dict={};
				for <item> in <iterable>
					dict[key-exp] = <val-exp>;
		3).集合推导式
			set = {<exp> for <item> in <iterable>}
		4).生成器推导式
			generator = (<exp> for <item> in <iterable>)
			虽然是圆括号，但是并非元组推导式(元组没有推导式)
		不同的推导式主要是外边的括号不相同。
	5.函数
		def fun([<var1>, <var2>, <var3>=<default>...]):
			<statement>
			[return <exp>;]
		参数直接用变量名即可，若有返回值直接用return即可。若没有return，则返回NoneType的None。
		调用时可以通过参数的声明顺序进行传参，也可以通过fun(<var1>=<ref1>, <var2>=<ref2>, ...)的方式进行传参。
		1).可变参数
			def fun(*args):
				<statement>
			args将会是一个元组，其中的元素顺序和传参的顺序相同。
			fun(*args)，是将元组按普通顺序传参的方法将参数传给函数。
		2).字典传参
			def fun(**kwargs):
				<statement>
			当函数调用的传参是字典形式是，用**的形式来接收。
			fun(**kwargs)，是将字典按命名传参的方法将参数传给函数。
			可以通过fun(*args, **kwargs)将合适的数据传给函数。
		3).函数也是对象
			所以函数对象是可以作为参数进行传递。
		4).内部函数和闭包
			函数中还可以定义函数，这样的特性也被称为闭包。Python对闭包的支持和Lisp是类似的。
			需要注意的是，当前作用域是不能修改外部作用域的局部变量以及全局变量的，只能对其进行访问。
		5).匿名函数
			lambda <var>:<exp>					# 参数<var>，返回值为<exp>
			Python对匿名函数的支持有限，仅仅支持简单的匿名函数。
			(lambda <var>:<exp>)(...);			# 进行函数调用
	6.生成器
		生成器本质上就是一个快速生成的迭代器。并且生成器只能迭代一次。
		def gen():
			yield 1
			yield 2
			yield 3
		gen是一个函数，执行后返回一个生成器，该生成器每次迭代按yield的顺序返回结果。
		a = gen();
		a每次迭代分别返回1,2,3。迭代玩所有元素后，a不能重新迭代，其实就是相当于迭代器迭代到最后面的元素了，不能再返回新元素。
	7.装饰器
		装饰器并非一种语法，而是一种设计模式，用于对现成函数外围进行一个修改：
			def decorate(func):
				def new_func(*args, **kwargs):
					<statement>
					func(*args, **kwargs);
					<statement>
				return new_func
			
			newfun = decorate(fun);
			newfun(...);
			上述代码可以给原函数fun在开始和结束之前添加代码。
		Python内置了装饰器的语法，该语法免去了人工调用decorate(fun)的过程:
			@decorate
			def fun(...):
				...
			执行fun(...)的效果等同于decorate(fun)(...)
	8.命名空间和作用域
		每个程序的主要部分定义了全局命名空间，这个空间的变量被称为【全局变量】。
		在函数的命名空间中，可以获取全局变量，但是不能修改全局变量，否则运行该函数时报错。
		更具体的说，当函数中操作一个全局变量名时，若先赋值，则会创建相同名字的局部变量。若先获取，则该变量就是全局变量本身。
		若希望在函数中控制全局变量，则需要添加global进行声明，后面对全局变量进行修改其实是生成了一个新的变量，因为两者的id(<var>)不同。
	9.异常处理
		和Java一样，一个异常是一个类：
			class MyException():
				<statement>
			
			def myFun():
				<statement>
				raise MyException();			# 这里将会生成异常对象并抛出，类似throw new Exception();
		可以通过try-except来捕捉异常：
			try:
				<statement>
			except [Exception as e]				# 可以捕获所有的异常，若加上了中括号中的内容，可以获取异常信息。
				<statement>
		也可以通过except <exceptionType> as <var>来捕获具体的异常，<var>为异常信息。
		
	1.其他
		通过#进行注释，Python中无多行注释，需要在注释的开头都打上#。
		当一行过长时可以将后面的内容放在下一行，通过\来标志和下一行进行连接。当然一个符号单位是不能通过\进行连接的，比如2\<换行>3，不代表23.
五、模块化
	每个py文件都有自己的全局变量空间，可以通过import在一个py文件中引入别的py文件的全局变量空间。
	1.import
		imort module
		<statement>
		module为模块名，模块名是py的文件名(除后缀)
		当Python运行到import module时，将会在【环境变量】(sys.path)指定的路径下去寻找module.py文件，并运行该文件，得到里面的全局对象。
		通过 module.<function> 来使用模块中的全局变量。
	2.别名
		import module as alias
		通过alias.<function>使用全局变量
	3.部分引入
		from module import <function>
		直接通过<function>使用。
		也可以在这里使用别名
		from module import <function> as alias
六、类和OOP
	1.基本用法
		1).定义
			class <ClassName>():
				# 初始化变量
				<var> = <defaultValue>
				
				# 构造器
				def __init__(self):
					<statement>
				# 一般方法
				def method(self):
					<statement>
			类的方法第一个参数【必须】是self，和Java类中的this同理。
			可以通过obj.<var>来给对象添加属性，并且访问不会受到任何限制，完全靠自觉。
			obj.method()和obj.method(obj)的效果完全相同。
			python中的方法不允许重载，若有同名方法，以最后定义的那个为准。
		2).实例化
			<ref> = <ClassName>(<args>);		# 调用构造器进行初始化
	3.继承
		1).定义
			class <ClassName>(ParentClassName):
				<statement>
			子类继承父类的所有方法。
			需要注意的是，子类如果没有__init__方法，则会自动调用父类的__init__方法.
			若之类有构造器的话则不会自动调用父类的构造器，需要显示调用:super().__init__();
		2).override
			子类方法可以覆盖父类同名方法，需要注意的是并不要求方法的标签相同，只需要方法名相同就会被覆盖。
			本质上就是以后定义的方法为主。
		3).调用父类方法
			通过super().<ParentMethod>(<args>)
	4.属性
		Python的属性不可以像C++/Java在类的直接作用域中编写属性及其初始化值，也可以直接在需要属性的时候通过obj.<var>来添加或者使用属性。
		1).getter-setter方法
			属性的getter-setter方法是为了在获取和使用属性的时候定义自己的操作，通常是需要辅助变量的。
			obj.<property> = xxx;		# 调用setter
			obj.<property>;			# 调用getter
			其实obj.<property>并发数据保存的地方，而是方法的入口名。
			class <ClassName>():
				def <getter-method>(self):
					<statement>
				def <setter-method>(self, input):
					<statement>
				<property> = property(<getter-method>, <setter-method>);
			通过obj.<property>和obj.<property>=xxx就可以访问两个方法，若需要保存数据则通常需要一个辅助的私有变量进行真正的数据保存。
			若不需要读取或是写入功能，则对应参数传入None即可。
			也可以通过注解的方式提供这样的功能
		2).私有属性
			上述的getter-setter方法提供了 只读/只写/读写/不可读写 的选择，但是会有对辅助变量的需要，而辅助变量还是可以直接访问的。
			当变量名是双下划线开头时 并在类中方法使用时，该变量即为私有变量，不可以直接通过变量名访问。
			即在类的方法中self.__<var> = xxx;在类外不可以通过obj.__<var>进行任何相关访问。
			Python是通过重命名来进行私有变量保护的，即self.__<var>=xxx;在内部实际上是self._<ClassName>__<var>=xxx，在外部也可以通过这个变量名来访问。
			当然在类的外部 obj.__<var>并非设置的私有变量，这个是不会做重命名的。
		3).类属性
			若在Python的类的作用域的最顶层定义属性，那么这些属性是类属性
			class <ClassName>():
				<ClassProperty> = <defaultValue>
			需要通过<ClassName>.<ClassProperty>来进行控制。
	5.方法
		1).实例方法
			实例方法就是直接在类中进行正常定义的，这些方法本质上就是函数对象。
			obj.method=3;是可以直接破坏掉方法的。
		2).类方法
			类所拥有的方法，没有self作为第一个参数的限制，并且需要通过@classmethod注解进行声明。
			类方法的第一个参数cls就是类引用本身。
			class <ClassName>():
				@classmethod
				def classMethod(cls):
					<statement>
			通过<ClassName>.<classMethod>()进行访问。
		3).静态方法
			不需要self，不需要cls，并通过注解@staticmethod进行声明。
		4).魔方方法
			本质上就是对于运算的重载：
				# self==other => __eq__(self, other)
				# self!=other => __ne__(self, other)
				# self <other => __lt__(self, other)
				# self >other => __gt__(self, other)
				# self<=other => __le__(self, other)
				# self>=other => __ge__(self, other)
				# self +other => __add__(self, other)
				# self -other => __sub__(self, other)
				# self *other => __mul__(self, other)
				# self /other => __truediv__(self, other)
				# self %other => __mod__(self, other)
				# self//other => __floordiv__(self, other)
				# self**other => __pow__(self, other)
				# str(self)   => __str__(self, other)
				# repr(self)  => __repr__(self, other)
				# len(self)   => __len__(self)
七、数据存储
	1.字符串数据
		1).Unicode
			Python中的字符串是Unicode字符串。
			UnicodeID是Unicode符号的标识：
				# \u及4个十六进制数字(0~9, A~F)，前两个数字代指语言平面(00-FF)，后面两个数字指定该字符在平面中的索引。
				# \U及8个十六进制数字，可以保存更多的语言平面。(该UnicodeID和上面的ID被称为Unicode文本)
				# \N{<name>}，其中name为该字符的标准名称，对所有平面的字符均适用。
				  在python中可以通过unicodedata.name(UnicdeChar)来查询一个Unicde符号对应的名称。
				  有了name以后可以通过unicdedata.lookup(<name>)来获取对应的符号，也可以直接通过'\N{<name>}'来获取对应的符号。
			Python中可以直接通过UnicodeID来获得对应的符号:"<UnicodeID>"。
			需要注意的是，没有任何一个字体涵盖了所有的Unicode字符，当前字体缺失对应字符的图片时，会以占位符的形式显示。
		2).编解码
			当需要和外界进行数据交互的时候，需要注意将【字符串编码为字节】，以及将【字节解码为字符串】。
			a).编码
				编码是为了满足字符串的传输和存储需要。通过str.encode(<encode-type>, [<type>])函数选择希望的格式进行编码。
				第一个参数<encode-type>是将字符串编码为什么类型的数据进行存储:
					# ascii
					# utf-8
					# latin-1(即ISO 8859-1)
					# cp-1252
					# unicode-escpae(转义文本，\uxxxx或者\Uxxxxxxxx)
				第二个参数<type>，标志如何处理无法编码的字符(比如中文字符串无法编码为ascii等)
					# 'strict' 要求所有符号都能编码，否则抛出异常。
					# 'ignore' 跳过无法编码的位置。
					# 'replace' 用?替换无法编码的位置。
					# 'backslashreplace' 用Unicode文本来代替无法编码的位置。
				因此编码本质上 Unicode数据 => <encode-type>数据 的一种转换。
			b).解码
				解码是将字节转换为Unicode字符串的过程。
				通过bytes.decode('<decode-type>')方法，就可以将字节数组恢复为Unicode字符串。
				因此解码本质上是 <decode-type>数据 => Unicode数据 的一种转换
				当然若数据并非<decode-type>数据，解码后的字符串可能会出错。
		3).格式化
			a).旧式
				<string> % (data0, data1, ...)
				其中<string>是待格式化的字符串，其中格式化的符号为:
					%s 字符串
					%d 十进制整数
					...
				格式化过程是按顺序将data1, data2, ...等数据代替格式化符号。
			b).新式
				<string>.format(data0, data1, ...)
				<string>是待格式化的字符串，其中格式化的符号位{<index>}
	2.二进制数据
		1).bytes
			字节序列，这是一种特殊的字节的表示，并且是不可变的。
			通过bytes(list);可以将list中的数据转换为字节序列。
		2).bytearray
			字节数组，和字节序列类似，这是可变的。
	3.文件
		1).IO
			a).打开
				fileobj = open(<file-path>, <mode>); 返回一个文件对象
				<mode>指明了操作方式，由两个字符组成的字符串。
				<mode>的第一个字符指明打开方式：
					r, 只读，要求文件存在。
					w, 只写，文件不存在则新建，文件存在则覆盖。
					x, 只写，文件不存在则新建，存在则抛异常。
					a, 只写，文件不存在则新建，文件存在则追加。
				<mode>的第二个字符指明了文件类型:
					t, 文本类型
					b, 二进制类型
			b).写文件
				# 写字符串
					若文件是以文本类型打开，则write是写字符串。
					count = fileobj.write(<string>)
					将字符串写入文件，并且返回成功写入文件的字符个数。
					write并不会立即写入磁盘，而是在缓存区中。通过fileobj.flush()方法可以刷新缓冲区，将数据放入磁盘。
				# 写二进制
					若文件是以二进制类型打开，则write是写二进制。
			c).读文件
				i).content = fobj.read(<size>);
					将文件中的<size>个字符读出。若没有设定size则全部读出。读到文件尾后还继续读，则返回空字符串。
				ii).line = fobj.readline();
					读取出一行。
				iii).迭代器
					也可以通过迭代器的形式来读取每行：
					for line in fobj:
						<statement>
				iv).lines = fob.readlines();
					返回所有行组成的一个列表，一行为一个元素。
			d).关闭
				通过fileobj.close()可以关闭文件
				文件对象不再被引用后Python是会关闭掉该文件的，也可以通过with来进行自动的文件管理：
					with open(...) as fobj:
						fobj.write(...)
					在执行完该代码块后，会自动清理资源。
			e).位置相关
				fobj.tell() 返回距离文件开始处的字节偏移量。
				fobj.seek(<offset>) 将读写位置跳到指定的直接偏移量处。
				fobj.seek(<offset>, <origin>) 
					如果origin等于0(默认为0), 则从开头偏移。
					如果origin等于1，则从当前位置偏移。
					如果origin等于2，则从最后结尾处偏移。
八、WEB
九、并发与网络