一、Python解释器
	Python代码可以通过python <python-file> <args>来运行，在python中可以通过sys.argv来获取传递参数列表。
二、Python流程控制
三、类
	Python类中的所有成员都是公有的，所有的成员函数都虚函数(即只要和父类函数重名，那就一定会override)。
	
四、模块
	模块中的定义可以导入到另一个模块或主模块中。并且模块名可以由全局变量__name__得到。
	1.模块的导入
		每个py文件都可以是一个模块，模块名就是这个py文件除开后缀的名字。
		通过import <module>，在当前模块中导入指定的模块。
		import <module>，导入模块，并添加模块名到全局符号表，对模块中定义的使用通过该名称。
		import <module> as <alias>，导入模块，并添加指定的名称到全局符号表。
		from <module> import <symbol>，导入模块的指定符号到当前模块的全局符号表中。
		from <module> import *，导入模块的所有符号到当前模块的全局符号表中。
	2.模块导入细节
		模块中除了包含定义以外，还包括了可执行的代码，这些代码用于模块的初始化，且在【第一次】被导入时执行。
		每个模块都有自己独立的全局符号表，因此这些定义其实都是将变量约束添加到了全局符号表中。
		通过<module>.<global-var>来获取一个模块的全局变量。
		可以看到，导入了一个模块，其实该模块名被添加到了当前模块的全局符号表中。
		1).reload
			出于性能的考虑，每个解释器会话中中，每个模块只会导入一次。
			因此若修改了模块后需要通过import imp;imp.reload(<module>);
			reload后，相关的符号会重新绑定。
		2).path
			在导入一个<module>的时候，会到sys.path的目录中找<module>.py文件，找到后导入。
			sys.path的值为：
				# 主模块的目录。
				# 环境变量 PYTHONPATH 表示的目录列表中搜索。
		3).dir()
			内置函数dir(<module-name>)，可以按模块名搜索模块中的定义(就是该模块的全局符号表)。
			当dir()直接运行时，打印当前模块的全局符号表。
	3.包
		包是指使用"圆点模块名"的结构化模块命名空间。<package>.<module>，包名其实就是sys.path下的相对路径名。
		1).from <package> import <item>
			<item>可以是子包，模块，函数，类或变量。
			当<item>为*时，会找出所有的子块，这可能相当耗时，因此通常会在每个包/子包路径下编写一个__init__.py文件。
			当from <package> import *时，将会执行<package>下的__init__.py文件，并找到里面的__all__，若该变量是列表，则只导入列表中写的模块。
		2).模块内导入
			包中有很多个模块，模块之间具备关联性，时常会相互导入。
			因为import <package-module>是从sys.path的目录中相对搜索，包其实就是直接放在这些目录中的，
			因此模块内导入需要编写完整的包名。(比如包在主模块的路径下，由于import是从主模块的路径下搜索，所以需要写完整的包和模块名)
五、虚拟环境和pip
	1).pyvenv
		虚拟环境用于解决不同程序之间包冲突问题，通过pip安装的只有一个固定版本的包，而不同的应用程序可能对包版本要求不同。
		因此需要由虚拟环境，将应用程序和固定的包版本放在自己的虚拟环境中，当加载包的时候实际上加载的是虚拟环境中的包。
		到需要创建应用程序的目录下，通过pyvenv <venv-name> 来创建一个虚拟环境。若<venv-name>目录不存在，会直接创建一个对应的目录作为虚拟环境的工作空间。
		通过<venv-name>/Scripts/active来激活虚拟环境。
	2).pip
		通过pip可以安装包，当激活虚拟环境后安装的包在虚拟环境中，否则安装在默认的lib路径下。
		pip install <package-name> [requests=<version>]	[--upgrade]	[-r <txt>]	# requests安装指定版本，upgrade升级包到最新版
		pip uninstall <package-name>		# 卸载包
		pip show <package>					# 显示一个已经安装的包的信息
		pip list							# 显示当前激活的虚拟环境下安装的包