一、全文检索
	1.数据
		结构化数据：固定格式或有限长度的数据，如数据库。
		非结构化数据：不定长，无固定格式的数据，也称全文数据，如word。
		半结构化数据：如xml，html
	
	对于非结构化数据（全文数据）的搜索采用顺序扫描，这相当慢。但是对于结构化数据的搜索是相当快的。
	将非结构化数据的一部分信息提取出来，重新组织，使其有一定结构，然后对此结构数据进行搜索，从而达到搜索较快的目的。这部分信息被称为检索。
	这种先建立索引，再对索引进行搜索的过程就叫全文检索。

二、索引
	通常我们的非结构化数据是文件到字符串的映射，即我们有很多文件，每个文件中有许多字符。我们有文件到字符串的映射，因此通过文件找到字符串很容易，但是通过字符串来找文件就只能顺序查找。
	因此要建立一种字符串到文件的索引，该索引方向与文件到字符串的索引方向相反，因此叫反向索引。
	"key1"--->file2--->file3--->file10--->file35--->file92
	"key2"--->
	"key3"--->file35-->file77-->file100
	
三、创建索引
	这里主要描述从文件->字符串的索引，建立字符串->文件这一反向索引的创建过程。
	1.获得索引的源文档
	2.将这些源文档进行分词操作，得到词元。词元就是单个的词，词元可能重复出现。
		1).将文档分词单个词
		2).去除标点符号
		3).去除停词，停词指的无缘紧要的词。
	3.将词元传给语言处理组件，得到词(Term)。Term可能重复出现。
		1).将词元变为小写
		2).将单词转变为词根形式，如drove变为drive。
	4.将Term传递给索引组件
		1).利用词创建一个字典。其实就是个Term->Document的kv对集合。
			Term1->doc_id
			Term2->doc_id
			...
		2).对字典按Term进行排序
		3).合并相同Term并组合成为文档倒排
			可能Term_i和Term_j是相同的，这时需要将Term相同的doc通过链表结合到一起去。
			Term1, DocFrequence--->docId, Frequence--->docId, Frequence
			Term2, DocFrequence--->...
			....
			这里的DocFrequence就是这个链表的长度，Frequence就是这个文档里的Term个数。
四、对索引进行搜索
	1.用户输入查询语句
	2.对查询语句进行词法分析，语法分析及语言处理
	3.搜索索引，得到符合语法树的文档，这时应该会有很多文档，还需要对其按输入的相关性进行排序。
	4.根据得到文档和查询语句的相关性，对结果进行排序
	