* 环境变量
Path是指令的搜寻路径。命令行执行一个指令，都是到环境变量的path下去寻找的。java、javac等等都是可执行程序，要让命令模式下执行这些程序，若没有配置这些程序的路径，那会非常麻烦。因此可以将这些可执行的程序配置到path路径下。
JAVA_HOME是一个普通变量它应该是jdk的路径，可以在path中直接引用，这样做是为了方便。其实有很多和java相关的第三方软件，都是通过JAVA_HOME这个环境变量来找到jdk路径的。
CLASS_PATH就是import的路径，换句话说，就是程序里面使用的class的路径。

至于eclipse等ide工具，它们很多自带了jdk的jar包。在创建工程的时候，可以用它们自己带的jar包，也可以指定用我们给定的jdk里面的基础jar包。

* IO
	1.流
		0).根据流出现的位置，可以分为包装流和节点流。
		1).根据方向，可以分为【输出流】和【输入流】
			输入和输出是相对于内存而言的。到内存中就是输入流、从内存出来就是输出流。
			输入流: InputStream，又叫Read
			输出流: OutputStream, 又叫Write
		2).根据读写方式，可以分为【字节流】和【字符流】
			字节流一次操作一个字节，适合读取视频、声音、图片等多媒体二进制文件。java中以Stream结尾。
			字符流一次操作一个字符，一个字符等于两个字节。适合读取【纯文本文件】。含有Reader或Writer。
		3).重要的流
			FileInputStream
			FileOutputStream
			FileReader
			FileWriter
			
			BufferedInputStream
			BufferedOutputStream
			BufferedReader
			BufferedWriter
			
			DataInputStream
			DataOutputStream
			
			ObjectInputStream
			ObjectOutputStream
			
			//字节流和字符流的转换
			InputStreamReader
			OutputStreamWriter
			
			PrintWriter
			PrintStream
		4).类结构
			Object <|-- InputStream <|-- FileInputStream
				|				 |__<|-- ObjectInputStream
				|				 |__<|-- FilterInputStream <|-- BufferedInputStream
				|									    |__<|-- DataInputStream
				|
				|__<|-- OutputStream <|-- FileOutputStream
				|			 	  |__<|-- ObjectOutputStream
				|				  |__<|-- FilterOutputStream <|-- BufferedOutputStream
				|									      |__<|-- DataOutputStream
				|										  |__<|-- PrintStream
				|
				|__<|-- Reader <|-- InputStreamReader <|-- FileReader
				|           |__<|-- BufferedReader
				|
				|__<|-- Writer <|-- OutputStreamReader <|-- FileWriter
				            |__<|-- BufferedWriter
							|__<|-- PrintWriter
				   
				   InputStream实现了Closeable接口
				   InputStream实现了Closeable接口和Flusable接口, Flusable有flush()方法进行刷新，将缓冲的内容全部写出去。
				   Reader实现了Closeable接口
				   Writer实现了Closeable接口和Flusable接口
		5).FileInputStream
			将硬盘的文件数据读取到内存中
			int data = fis.read()			//读取并返回1个字节, 若返回-1，文件读完。该方法频繁访问磁盘会伤害磁盘，并且效率低下。
			int length = fis.read(byte[] b);//一次读取多个直接字节，将数组填充满，返回实际读取到的字节数。若一个都没读取到，返回-1
			fis.skip(n);					//跳过的字节数
			int length = fis.available();	//返回还有多少个直接可以读取。
		6).FileOutputStream
			将内存中的数据写到硬盘文件中
			FileOutputStream fos = new FileOutputStream("<file>", boolean append);	append是指定是否在文件末尾进行。若file不存在，将会创建新文件。
			fos.write(byte[] bytes); 	将bytes数组中的所有数据写入
			fos.write(byte[] bytes, start, length);	从start开始写入length个
		7).FileReader和FileWriter
			将前面的byte[]换成了char[]，并且FileWriter运行写入字符串:fw.write("xxxx");
		8).BufferedReader
			BufferedReader br = new BufferedReader(new FileReader("<file..>"));	//将文件字符输入流，包装成带有缓冲区的输入流	
			BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("tmp")));		//可以将字节流包装成字符流，再包装成带缓冲区的流。
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	//将标准输入流InputStream包装成字符流，然后再作缓冲区包装。
			String res = br.readLine();		//读取文本行, 若读不到，返回null.但是，读的这一行不带换行符的！
			br.close();						//关闭只需要关闭最外层的包装流。
		9).BufferedWriter
			和BufferedReader差不多，只不过是输出的。有个newLine的方法，其实我觉得没啥意思。
			不过，由于其write是先写入缓冲区，在flush时才写入输出流，因此要在必要的时候【刷新缓冲区】。
		10).DataOutputStream
			数据直接输出流
			将“数据”写入到硬盘文件中，写入的不是字符串，而是二进制数据。
			DataOutputStream dos = new DataOutputStream(new FileOutputStream("<file>"));
			dos.writeByte(byte b);
			dos.writeInt(int i);
			...
		11).DataInputStream
			和DataoutputStream异曲同工。且必须配合使用。
		12).PrintStream
			标准输出流。System.out,就是一种，默认打印到控制台。
			PrintStream out = new PrintStream(OutputStream);
			System.setOut(OutputStream);可以改变默认的输出流
			OutputStream可以是new FileOutputStream("<...>");
	2.序列化
		将对象保存到硬盘中，就是对象的序列化。从硬盘中恢复到内存里，就是反序列化。
		1).ObjectOutputStream
			序列化到硬盘
			ObjectOutputStream oos = new ObjectOutputStream(outputStream);
			outputStream 可以是 new FileOutputStream("tmp8");
			oos.writeObject(object);	//将对象写入输出流
			
			【一个对象要序列化，必须实现序列化接口，否则无法支持序列化】
			class OneClass implements Serializable{
				...
			}
			这个接口是没有方法的，只是一个标志。包括Cloneable接口，也没方法。
			标识接口的作用：
				JVM看到对象实现了某个标识接口，会对它特殊待遇。
		2).ObjectInputStream
			反序列化到内存
			ObjectInputStream ois = new ObjectInputStream(new FileInputStream("tmp8"));
			Object o = ois.readObject();
			反序列化在构建对象的时候，会用到对应的.class文件，否则无法重建。
		3).serialVersionUID
			JVM会给实现了Serializble的类，在序列化的时候，添加了一个serialVersionUID属性，用于区别不同的类。
			就算类名完全相同，但是UID不同，也是无法反序列化的。
			a).序列化版本号是可以手动提供的。
				直接在类里写：static final long serialVersionUID = xxxxxL;
			b).可以禁止某个属性序列化
				transient field;
				反序列化时，field为null
	3.File
		File是文件和目录路径名的抽象表示形式。也就是说File代表硬盘上的Directory和file。
		File f = new File("<path>");
		
		f.exists();			返回该文件或目录是否存在
		f.mkdir();			创建目录
		f.mkdirs();			创建多重目录（即递归创建）
		f.createNewFile();	创建文件
		f.canWrite();
		f.canRead();
		f.delete();
		f.getAbsolutePath();
		f.parentPath();
		f.isDirectory();
		f.length();
		String[] res = f.list();	找出目录下的所有文件名，这里要求f是个Directory
		File[] res = f.listFiles();	找出目录下所有的File
		
* 异常
	java中采用类去模拟异常。
	一个异常类，代表一类异常。一个异常对象，是一个具体的异常事件。
	若出现了异常事件【没有处理】，则后面的代码不会执行，直接退出JVM。
	1.异常类结构关系：
		Object <|-- Throwable <|-- Error
							  <|-- Exception <|-- RuntimeException
											 <|-- 编译时异常类
							  
		1).Throwable
			可抛出，所以异常都是可抛出的。
		2).Error 错误
			是严重的，无法处理，只能直接退出jvm。
			如StackOverFlowError。
		3).Exception 异常
			若程序没有处理异常，程序直接退出jvm。
		4).RuntimeException
			运行时异常.如Null异常、除零异常。
			运行时异常，是不用写异常处理的。当然，若发生了，没处理，会直接退出jvm。
			现实中，发生的几率低。
		5).编译时异常类
			非RuntimeException的异常。如文件不存在异常。
			要求程序在编写程序阶段，必须对它进行处理，如果不处理，编译无法通过。
			处理异常有两种方式:
				a).捕捉  try-catch
				b).声明抛出 方法声明使用throws关键字。
			不对编译时异常进行如上处理，根本编译不通过。也就是说，编译时异常是不会造成系统崩溃的，因为怎么说都处理了，除非在main还抛出。。。
			发生的几率高，一般常见的异常处理都是针对编译时异常的。
	2.处理异常
		1).声明抛出 throws
			方法上声明throws，意味着该方法可能会抛出这个异常。当发生异常时，便会向方法调用者抛出该方法。
			若方法的函数体内，有可能发生异常，则在发送异常是，将会向上抛出该异常，该方法发送异常的后面的代码将不再执行。
			若都抛异常抛到了main外面去了，则jvm打印异常信息并且退出执行。
		2).捕捉 try-catch
				try{
					可能出现Exception的代码.
				}catch(异常类型1 e1){
				
				}catch(异常类型2 e2){
				
				}
				...
			catch中的异常类型，应该覆盖try语句块中代码所有可能出现的异常类型。
			catch的异常必须从上到下，从小到上捕捉。也就是说，若上面的catch的异常类型，包含了下面的catch的异常类型，那么编译不会通过，因为下面的catch异常不会被执行到。
			try-catch最多执行1个语句块，因为遇到异常后，后面的代码不会执行，直接跳到catch中。
			catch执行完后，【会执行到方法结束】。
	3.异常对象常用方法
		1).pprintStackTrace();
			打印异常堆栈信息，一般情况下都会使用该方式去调试程序。
			如:	java.io.FileNotFoundException: ab.txt (系统找不到指定的文件。)
					at java.io.FileInputStream.open0(Native Method)
					at java.io.FileInputStream.open(Unknown Source)
					at java.io.FileInputStream.<init>(Unknown Source)
					at java.io.FileInputStream.<init>(Unknown Source)
					at com.lsj.exception.MyTest.m(MyTest.java:8)
					at com.lsj.exception.MyTest.main(MyTest.java:13)
			抛出异常的过程记录在堆栈中。上面是最深的异常抛出位置。
		2).getMesssage
			获得异常的解释字符串。
	4.finally语句块
		finally语句块中的内容，是一定会执行的。就算在try语句中有return语句，也是会执行完了finally后才return。
		只有一种情况finally不会执行：在try中用System.exit(0); 退出了jvm。
		对于
			try{
				return object;
			} finally{
				操作object...
			}
		等价于
			try{
				Object  = object;
				return tmp;
			} finally{
				操作object，也就不会影响finally中的返回值。
			}
		由于finally一定会执行，所以通常在finally中释放资源。
		(	final修饰类，类无法继承。修饰变量名，设置为常量
			finalize是方法名, 垃圾回收器回收前会调用)
			
	5.自定义异常与主动抛出异常
		编译时异常，直接继承Exception。运行时异常，直接继承RuntimeException
		class MyselfException extends Exception{
			public IllegaNameException(){}
			public IllegaNameException(String msg){super(msg);}
		}
		
		method() throws MyselfException{
			MyselfException e = new MyselfException("发送了异常");
			throw e;
		}
		后面如果继续向上抛，都是对这时候生成的异常继续抛出！！也就是说后面的上抛，并不是产生新异常，而是将一个已经存在的异常继续抛出。
		子类的方法 无法抛出比 父类中的相同方法 更宽的异常。
		若父类中的该方法没有抛出异常，重写的方法永远无法抛出异常。因为之类无法抛出比父类更多的异常。
		若父类抛出Exception，子类可以抛的就多了，在Exception类中的都可以抛出。
* 可变长参数:
	void method(int... a){
		...
		//这里a接收到的是个数组
	}
	但若有精确匹配的方法，则会调用精确匹配的方法
	void method(int a){
		...
	}
	method(3);	//会调用定长参数的
	【可变长参数只能放在参数列表的末尾】
	
* 属性文件:
	.properties这样的文件可以作为属性配置文件。用.properties作为后缀。（其实随便都行，只是为了区分配置文件的文法类型与其作用，因为还有其他文法的配置文件，比如.xml .json）
	key和value之间可以使用“空格” "冒号" "等号"。并按在最前面的作为分隔符。
	读取属性文件的代码：
		Properties p = new Properties();
		p.load(new FileInputStream("<properties-file>"));	将文件流中的数据，加载到属性对象中去
		String value = p.getProperty("<key>");		得到value
* 反射:
	0.关联类
		java.lang.Class;
		java.lang.reflect.Constructor;
		java.lang.reflect.Field;
		java.lang.reflect.Method;
		java.lang.reflect.Modifier;
		后四个由Class所包含。
		
		class User{
			String name;
			User(){}
			public void ml(){}
		}
		Class代表整个类的结构。
	
	1.反射机制的作用:
		1).反编译: .class->.java
		2).通过反射机制访问java类的属性、方法、构造器等。
		
	2.获取Class的三种方式
		1).Class c1 = Class.forName("<class-name>");	这个的运行，会将对应的class加载的jvm中，因此会执行static语句块
		2).java每个类都有个class静态属性
			Class c2 = <class-name>.class;				这个的执行，是不会执行静态语句块的。
		3).java语言中任何一个java对象，都有一个getClass方法
			Class c3 = <obj-name>.getClass();
		Class对象是单例模式，也就是说这三种方式得到的类对象都是一样的。一个运行时类对象，只有一个。
	
	3.通过反射创建对象
		在获取Class类型的对象后，可以创建Class对应的对象。
		Object = <Class-object>.newInstance();		//调用无参构造方法，返回一个Object实例
	
	4.获取类中的属性、方法、构造器以及其他方法
		0).其他
			<Class-Object>.	getName();			//获得类的类全名
							.getSimpleName();	//获得不包括前缀的类名
		1).获取属性
			Field[] fs = c.getFields();			//获取所有的public修饰的属性
			fs = c.getDeclaredFields();			//获得所有的属性
			f = c.getDeclaredField("<field>");	//返回特定的属性
			
			f.getName();						//获得属性的名字
			f.getType();						//获得这个属性的Class对象
			f.getModifiers();					//获得这个属性的修饰符, .toString()显示修饰符名字
			f.get(o);							//获得对象o的fs[0]属性的值
			f.set(o, value);					//设置对象o的fs[0]属性的值
		2).获取方法
			ms = c.getDeclaredMethods();		//获取所有方法
			m = c.getDeclaredMethod(<method-name>, <param-list>);	//获得具体的方法,<param-list>是Class类型的变长参数
			
			rt = m.getReturnType();				//获取返回值类型
			methodName = m.getSimpleName();		//获取方法名
			Class[] ps = m.getParameterTypes();	//获得方法的参数列表类型
			
			Object res = m.Invoke(o, <param-set>);			//用参数<param-set>调用o对象的m方法，<param-set>是Object类型的变长参数，返回值Object类型对象
		3).获取构造器
			省

* 集合
	集合只能保存引用类型。
	1.结构
	Iterable <|-- Collection <|-- List <|-- ArrayList
	                      |         |__<|-- LinkedList
						  |         |__<|-- Vector
						  |
	                      |__<|-- Set <|-- HashSet
						           |__<|-- SortedSet <|-- TreeSet
	Map <|-- HashMap
	 |__<|-- HashTable <|-- Properties
	 |__<|-- SortedMap <|-- TreeMap
	 
		1).迭代器Iterable的子类都是可迭代的。有一个iterator的方法
			Iterable的子类都是可迭代的。有一个iterator的方法,返回一个Iterator<T>类型的迭代器，用于遍历集合。
			Iterator<T>有3个方法:
				a).hasNext()
				b).next()
				c).remove()
			javaSE中的每种集合实现类，都实现了自己的迭代器，并且返回它。
			初始迭代器是指向第一个元素的，next将指向的元素返回，并移动到下一个元素。
			remove()方法删掉的是当前所指元素的前一个元素。
			|_| <- lastRet
			|_| <- cursor / next(lastRet)
			|_| <- next(cursor)
			next()，返回cursor所指对象，并且cursor和lastRet往下移动。
			remove(), 删除lastRet所指的对象，cursor保持所指的对象（也就是cursor前移一步）
		2).Collection
			只能存储引用类型，并且只能单个存储。
			boolean add(Object o);		想集合中添加元素
			void clear();				清空
			boolean isEmpty();			判断是否为空
			Iterator<E> iterator();		【迭代器】
			boolean remove(Object o);	删除集合中某个元素
			int size();					获取集合中元素的个数
			Object[] toArray();			将集合转换成数组
			boolean contains(Object o );判断o是否存在
				a).可以看出， Collection只能存，不能取。只能转换成数组或是迭代器来取数据。
				b).contains里面使用的是equals方法来进行相等判断。
				c).remove也是用的equals方法
		3).Map
			以kv键值对存储。key是无序不可重复的。
	2.List集合
		特点:有序、可重复。（有序指的存进去什么顺序，取出来也就什么顺序，也就是顺序不会更改）
		0).常用方法
			get(int index);	//获得指定索引的元素
		1).ArrayList
			底层采用数组存储元素，因此适合查询和赋值，但是不适频繁的随机增删元素。
			默认初始化容量是10，按1.5倍进行扩容。可以在初始化时指定较大容量，以免频繁扩容。
		2).LinkedList
			底层采用双向链表，适合频繁增删元素，但不适合随机查询。
		3).Vector
			和ArrayList相同，但是其线程安全。但效率较低，很少使用。
			默认初始化容量是10，按1.5倍进行扩容。
	3.Set集合
		特点:无序，不可重复。(存进去的顺序和取出来的顺序不一样，也就是说顺序被修改了的)
		对于SortedSet集合，存进去的顺序是排序的。(TreeSet结构本来就是二叉搜索树)
		1).HashSet
			HashSet就是一个没有value的HashMap，其底层是Hash结构。
			add(o); 若o已经存在，那么放弃add，相等判断是通过hashCode和equals进行的。
					先通过hashCode判断，若hashCode有相同的，再到该数组里，用equals对o进行判断。
					若hashCode直接就不存在，那么就在数组中添加新的元素。hashCode相同的元素，都在同一数组里。
			
			数组初始化容量是16，默认加载因子是0.75。
			其中的数组元素，占了75%就会开始扩容。
			
			存储在HashSet需要重写hashCode方法和equals方法以满足项目的需求。尽量hash均匀分布。
			对于一个对象，如果没有重写hashCode，那么它返回的都不一样，那么hashSet就退化成一个数组了。
			如果将hashCode返回相同的值，那么hashSet就退化成一个链表了。
		2).TreeSet
			有排序功能。元素也不能重复。
			TreeSet添加的对象，需要重写Comparable。比较是否相等，也是通过Comparable的接口方法实现的。
			也可以单独编写一个比较器, 再创建TreeSet的时候，传递比较器:
				Set es = new TreeSet(new Comparator(){
					@Override
					public int compare(Object o1, Object o2) {
						
						return 0;
					}
				});
	4.Map
		0).常用方法
			boolean containsKey();
			boolean containsValue();
			
			Object get(Object key);		通过key获取value
			Object put(key, value);		添加kv对
			
			Set KeySet();				获取map中所有的Key
			Collection<V> values();		获取map中所有的value
			
			
			Set<Map.Entry<K,V>> entrySet();	返回此映射中包含的映射关系的Set视图字符串，相当于返回很多个"key=value"的字串
			void clear();
			Object remove(key);			根据key, 删除一个kv
			boolean isEmpty();
			int size();					获取map中kv对个数
			
		1).HashMap
			Key是个HashSet。
			初始化容量是16，默认加载是0.75。
			如果key重复了，则覆盖！
		2).HashTable
			线程安全, 效率低。
			默认初始化容量是11， 默认加载因子是0.75。
		3).Properties
			key和value只能是字符串类型。
			关键是可以进行加载，这样的话可以通过该类型对象读取配置文件。
			getProperty("<key>");
			setProperty("<key>", "<value>");
			load(InputStream);		//将输入流的kv对字符串进行结构化
		4).TreeMap
			Key是个TreeSet.
	5.Collections
		集合工具类。他提供了一些列的算法，包括排序，求最小最大值，线程安全转换。
		排序的实现，需要对象实现了Comparable接口。
		sort();
		synchronizedList(List list);	将list集合转换为线程安全的
		synchronizedList(Set set);		将set集合转换为线程安全的
	6.数组和List的相互转化
		数组到List的转换：List s = Arrays.asList(new String[]{"1", "2", "3"});
		List到数组的转换: Object[] items = list.toArray();
	7.泛型
		如果不使用泛型，集合中的元素类型不统一，需要大量的强转，代码很丑。并且将运行时期的错误，移到了编译时期。
* 泛型
	* 边界
		边界使得程序员可以在泛型上设置限制条件。class A <T extends B>用于对泛型类A的【类型参数】进行描述。边界只有extends，没有super。
		<T extends A>声明T具有类型A或者从类型A导出的类型。泛型类型参数将擦除到它的第一个边界上。
	* 通配符
		泛型表达式中的问号，就是通配符。A<? extends/super B>用于对【泛型类】进行描述。
		通配符用于泛型的向上或向下转型。比如容器类型和数组类型不同，无法自动向上转型，这是就需要依靠通配符。
		* extends
			A<? extends B> a，代表着a是一个 【类型是A】，其【泛型类型可以是B的子类(包括B)】的任何对象。
			比如以下代码
			class Fruit {}
			class Apple extends Fruit {}
			class Orange extends Fruit{}
			
			List<? extends Fruit> list = ....;
			因为List<? extends Fruit> 代表了一个泛型类List 类型参数是Fruit子类的任何对象都有可能。这也就意味着list的动态类型可能是List<Fruit> 也可能是List<Apple> 也可能List<Orange>
			当然，这也就意味着list实际保存的对象和add操作的对象是不同的，为了避免这样的情况发生，编译器强制性的禁止了和泛型类型参数有关的方法的执行。因为add方法是add(E e)，参数e涉及了泛型类型，因此add无法调用。
		* super
			这是超类型限定。
			A<? super B> a，代表着a是一个 【类型是A】，其【泛型类型可以是B的父类(包括B)】的任何对象。
			因为a的泛型类型是B或者B的父类，因此用a的方法中传入B或者B子类的对象是没有任何问题的。若对象非B的子类，那么编译器将报错。
			List<? extends Apple> list = ....;
			a可以是List<Apple> 也可以是List<Fruit>。
			
		* 无界通配符
			<?>即无界通配符，无界通配符可以被认为是装饰，但它也有其价值，主要是想程序员声明之用，就像是注释。
			声明了“本来想用泛型来编写这段代码，但是在当前这种情况下，泛型参数可以持有任何类型”。和原生类型不同的是，<?>声明的泛型类对象，不可以调用涉及了泛型参数的方法。
* 序列化
	对象都可以作序列化，但是前提是对象的类需要实现Serializable接口，这样对象才能支持序列化。
	若没有实现Serializable，则会抛出java.io.NotSerializableException异常。
	需要注意的是，对象的序列化是会将实例引用也进行序列化的，这样需要引用的对象实现了序列化接口，否则也会抛出异常。
	1.序列化版本
		类中可以指定serialVersionUID，这个是用来检测类版本是否一致的。
		在反序列化的时候，会将字节流中的serialVersionUID与本地相应实体了的serialVersionUID进行比较，如果版本不同，则会出现序列化不一致并抛出异常。
	2.序列号
		用于解决对象引用的问题。
		在序列化一个对象时，对其中的引用也会进行序列化，并且每个对象都会分配一个序列号。在一次序列化过程中，当第一次遇到这个序列号，会将对象序列化保存，若第二次遇到这个序列号时，则不会保存该对象了，因为之前已经保存过了，而是保存序列号以标定使用的是哪个对象。
	3.transient
		用于声明对象中的实例的，声明为transient的实例，是不会被序列化的，并以null代替(若是int double等基本数据，则用0代替)。

* jdk动态代理
	jdk动态代理，会通过字节码生成的方式来生成一个实现指定接口的对象，并且这个对象中有一个Handler对象，Handler对象用来拦截对这个对象的所有调用。一个动态代理对象的反java代码形如下所示:
	1.动态代理对象形式
		public Proxy implements IA{
			InvocationHandler handler;
			
			@Override
			void method1(){
				handler.invoke(this, IA.interfaceObject.getMethod("method1", <parameter>), null);
			}
			
			@Override
			String method2(int a){
				return handler.invoke(this, IA.interfaceObject.getMethod("method1", <parameter>), null);
			}
			
			...		//把接口中的方法都进行了重写
		}
	2.InvocationHandler
		既然是代理，那肯定有个原始对象，而在上述形式中并未看到会代理的原始对象，那么原始对象是放在哪里的呢？答案是一般放在处理器Handler中的。
		public class ProxyHandler implements InvocationHandler{
			Object object;		//保存原始对象
			
			public DrocProxyHandler(Object object){
				this.object = object;	//交给Handler原始对象
			}
			
			@Override
			public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
				....
				Object result = method.invoke(object, args);
				...
				return result;
			}
		}
	3.生成动态代理对象，并交给它处理器
		Object ori = new Object();
		Object obj = 
				Proxy.newProxyInstance(
						ClassLoader,					//用来加载目标类的类加载器。
						new Class<?>[]{...},			//重写的接口。
						new ProxyHandler(origin));		//这里交给动态对象Handler，并且指定了Handler的原始对象，也就是会被代理的对象。
