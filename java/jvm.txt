深入理解Java虚拟机-JVM
	java -version可以查看本机java版本信息，包括使用的jvm类型。sun jdk使用的是HotSpot虚拟机。

(一)、Java内存区域与内存溢出异常
	一、运行时数据区域
		1).程序计数器
			一块较小的内存空间，记录程序每个线程的字节码运行到的位置。这是线程私有的。
		2).虚拟机栈
			通常我们说的栈，就是指的虚拟机栈。以线程为单位，并且线程之间相互独立，是线程私有的。每个线程都有一个对应的栈帧，栈帧中的内容存储了局部变量表、操作数栈、动态链接、方法出口等信息。
			局部变量表存放了编译器可知的各种基本数据类型、对象引用和returnAddress类型。64bit的long和double会占用两个局部变量空间，其余占用一个。
		3).本地方法栈
			虚拟机栈为java方法服务，而本地方法栈为native方法服务，方便和其他语言对接。HotSpot已经把本地方法栈和虚拟机栈合二为一。
		4).堆
			线程共享，在虚拟机启动时创建，堆用于存放对象实例。
		5).方法区
			线程共享，存储虚拟机加载的类信息，常量，静态变量等数据。方法区也称为【永久代】，作为gc分代管理的一部分。
			【常量池】，是方法区的一部分。用于存放编译器生成的各种字面量和符号引用，运行期也可以将新的常量放入池中。例如String的intern方法。
	二、对象的创建
		虚拟机遇到一条new指令，就开启了对象的创建过程
		1).类加载
			首先去检查这个new指令的类是否已经加载、解析和初始化到常量池。若没有则要先进行类加载过程。
		2).内存分配
			虚拟机将为新生的对象分配内存，对象所需要的内存大小在类加载完成后便可以【完全确定】。
		3).对象内存空间初值
			将分配到的内存空间都初始化为0或null。
		4).对象头初始化
			虚拟机对对象进行必要的设置，比如对象是哪个类的实例、如何找到类的元数据信息、对象的hashcode、对象的gc粉黛年龄等信息。这些信息放在对象的对象头中。
		5).构造函数执行
			到这里就可以按照程序员的意愿进行初始化了。
	三、对象的内存布局
		对象在内存中存储的布局可以分为3块区域：
		1.对象头
			对象头又分为两部分:
			1).对象自身运行时数据
				包括哈希码、gc分代年龄、锁状态标识、线程持有的锁、偏向线程的id、偏向时间戳。这部分数据为32bit(32bit机中)或64bit(64bit机中)。官方称这部分数据为Mark Word。
			2).类型指针
				对象指向它的类元数据的指针，vm用这个指针来确定这个对象是哪个类的实例。
			3).长度
				该部分数据并不普遍存在于对象中，仅存在于数组对象中，用于确定数组的长度。
		2.实例数据
			无论从父类继承的，还是在子类中定义的，都需要记录起来。这部分的存储顺序会受到虚拟机分配参数和字段在java源码中定义顺序的影响。
		3.对齐填充
			占位符作用，对象的大小必须是8字节的整数倍。
	四、对象的访问定位
		1.使用句柄
			java堆中会划分出一块内存作为句柄池，reference中存储的就是对象的句柄地址，句柄地址包含了【对象的地址】与【对象类型数据的地址】。
		2.直接指针
			reference中直接就是对象的地址。【hotspot是使用该方法】
	五、调试设置
		-Xms/-Xmx 设置堆的最大值和最小值，如-Xms-20m -Xmx20m代表堆的大小固定为20M。
		-Xss 设置栈的大小，如-Xss128k 设置栈为128KB。
		-XX:PermSize/-XX:MaxPermSize 设置方法区大小。
		-XX:+HeapDumpOnOutOfMemoryError 当vm出现OutOfMemoryError时，会将内存堆转存为快照以便事后进行分析。