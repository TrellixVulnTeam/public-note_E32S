中文编解码
	1.IDE存储
		在Eclipse中可以Text file encodin的类型，支持GBK、UTF-8等等。这是在.java中书写程序时，java代码在磁盘中的编码方式。通常我们会选择UTF-8的编码方式。		
		
	2.String
		<String m = "I am 学生";>
		上面尖括号内的字符是java代码，这段代码在ide中的保存方式为UTF-8。意味着上面 【学生】 这两个汉字是以UTF-8保存的。那么在java程序中呢？
		String的数据都是保存在里面的char数组中的，java的char默认是以unicode形式来进行保存的(unicode==UTF-16)。
		这就意味着虽然在磁盘上 学生 这两个字是UTF-8，但是在内存中是UTF-16。
	3.编码
		byte[] bytes = m.getBytes("编码格式");
		通过上述代码，可以将m进行编码。编码可以看做是序列化，这是因为编码的目的是为了将对象保存或传输，而编码就是将字符串对象转化为数组，这样就能传输和保存了。
		虽然对象本身是unicode形式的数组，但是其实java要求我们将对象看做是黑箱，意味着我们可以不用管对象中数据的实际存储方式，把它看做是一个【源】即可，将源的数据拿出来编码，就可以得到传输和存储用的二进制数据(数组形式)。
		也由于对象本身是unicode形式的数组，编码其实就是unicode转换为其他编码格式的工作。
	4.解码
		String m2 = new String(bytes, code_type);
		通过上述代码，可以将bytes按照"编码格式"进行解码。解码可以看做是反序列化，将二进制数据转换为对象。
		更具体一些，解码的工作就是认为bytes的编码格式为code_type，并将code_type格式转换为unicode编码格式的过程。
		总之，就是将二进制数据按code_type的格式转换为unicode格式。
	5.涉及到字符的方法
		1).new String("...");
			这是构造方法，这段其实相当于是进行解码，将工作空间字符格式的二进制数据转换为unicode字符进行保存。
		2).Writer.write(char[]/String)
			char[]/String中是unicode字符，这个操作会进行编码操作。将unicode转换为工作空间字符格式的二进制数据，并将其输出到指定位置。
		3).Reader.read(char[])
			char[]是uncide字符，会将Reader缓冲区中的二进制数据进行读取，并采用工作空间字符格式进行解码，将其存为unicode放在char[]中。
		总之，只要涉及到字符编解码的方法，默认采用工作空间字符格式。
	6.ISO8859
		这是一个非常特殊的编码格式，因为该编码是不能编码中文的。换句话说，若String中有中文，用iso8859编码得到的数组中是不包含中文数据，因此中文数据就丢失，中文数据的位置以字符'?'填充。
		因此在中文不可以用iso8859格式。
		