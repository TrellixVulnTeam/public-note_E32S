package com.lsj.util;

import java.util.Arrays;

public class LPriorityQueue<T extends Comparable<? super T>> implements LQueue<T>{

	private T[] items;
	private int size;
	private int tail=1;
	
	@Override
	public int size() {
		return size;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public boolean add(T element) {
		ensuerCapacity(tail+1);
		
		return false;
	}

	@Override
	public T poll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public T remove() {
		// TODO Auto-generated method stub
		return null;
	}
	
	private void ensuerCapacity(int nextTail){
		if(nextTail == items.length){
			items = Arrays.copyOf(items, items.length<<1);
		}
	}
	
	private void fitUp(T element){
		
	}

	private void fitDown(){
		T temp = items[tail-1];
		
		for(int index=1; index * 2 <= tail-1; ){
			int leftIndex = index*2;
			int rightIndex = index*2 + 1;
			int result = items[leftIndex].compareTo(items[rightIndex]);
			if( result < 0 ){
				items[index] = items[leftIndex];
				index = leftIndex;
			}else if( result > 0 ){
				items[index] = items[rightIndex];
				index = rightIndex;
			}else{
				items[index] = items[leftIndex];
				index = leftIndex;
			}
		}
	}
}
