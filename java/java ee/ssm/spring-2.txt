一、spring
	一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架
		- 从大小和开销两方面spring都是轻量的。
		- 通过IoC的技术达到松耦合的目的。
		- 提供了AOP编程，可以分离业务逻辑与系统服务。
		- 包含并管理应用对象的配置和生命周期，这个意义上是一个容器。
		- 将简单的组件配置、组合成为复杂的应用，这个意义上是一个框架。
	使用范围
		构建企业应用(SpringMVC + Spring + Hibernate/ibatis/Mybatis)
		单独使用Bean容器
		单独使用AOP进行切面处理
		对消息的支持
		...等等
		
二、spring注入
	spring注入是指在启动spring容器加载bean配置的时候，完成对变量的赋值行为。
	常用的两种注入方式:
		- 设值注入
			通过属性的set get方法进行注入。
			<bean id="" class="">
				<property name="<property-name>" ref/value=""/>	<!-- property-name需要和get set方法中的名字相对应. ref是使用引用，value是使用值-->	
			</bean>
			
		- 构造注入
			通过构造器的参数注入
			<bean id="" class="">
				<constructor-arg name="<property-name>" ref/value=""/>	<!-- property-name需要和构造器中的参数名相同-->	
			</bean>
		<ref="">需要指出由spring管理的bean的id名，会将该bean注入给到ref对应的属性中。
		
三、Bean
	1.配置项
		1).id
			该bean在spring中的唯一标识
		2).class
			该bean对应的类
		3).scope
			bean的作用域
				a).singleton, 单例模式，spring中该bean只存在一个，默认模式。
				b).prototype, 每次请求创建新的实例
				c).request 每次http请求创建一个实例，并在当前request内是单例的。
				d).session, 同上
				e).global session
		4).constructor arguments
			该bean通过构造器需要注入的属性
		5).properties
			该bean通过set方法注入的属性
		6).Autowriting mode
			自动装配的模式
		7).lazy-initialization mode
		8).Initialization/destruction method
	2.Bean的生命周期
		1).定义
			在配置文件中进行定义
		2).初始化
			ioc容器启动的时候加载。有两种方法:
			a).实现org.springframework.beans.factory.InitializingBean接口，覆盖afterPropertiesSet方法
			b).配置init method
				<bean init-method="init" >..</bean>
				class ExampleBean{
					public void init(){	//init-method
						...
					}
				}
			c).全局配置
		3).使用
			从spring取出bean实例
		4).销毁
			有两种方法:
			a).实现org.springframework.beans.factory.DisposableBean接口，覆盖destroy方法
			b).配置destroy method
				<bean init-method="cleanup" >..</bean>
				class ExampleBean{
					public void cleanup(){	//destroy-method
						...
					}
				}
			c).全局配置
		5).需要注意的是:
			* 若采用了a或者b，那么c定义的初始化或销毁是不会执行的。
			* 若a和b都配置了，a的优先级高于b(a的先执行)
			* 对于c配置，是不必在代码中强制实现的，但是对于a配置，代码中若没有实现会报错。
	3.Aware接口
		实现了Aware结尾接口后的bean在初始化之后，可以获得相应的资源。
		1).ApplicationContextAware, 用于获取ApplicationContext, 这个对象就是spring的工厂，用于获取对象的。
		2).BeanNameAware, 用于获取当前bean在配置文件中的id
	4.自动装配(Autowriting)
		A中包含了B，默认需要配置bean的property才可以让B自动注入到A的属性中。若采用自动装配，则可以不配置。
		1).配置装配模式
			default-autowire="<mode>"
		2).装配模式
			No, 不做任何操作，默认的。
			byName, 根据属性名自动装配, A中B的属性名应该和配置文件中B的bean-id相同。
			byType, 根据类名自动装配，A中B的属性名应该和配置文件中B的bean-class相同。
			Constructor
	5.Resource
		针对于资源文件的统一接口。
			UrlResource，URL对应的资源，根据一个URL地址即可构建。
			ClassPathResource
			FileSystemResource
			ServletContextResource, ServletContext封装的资源，用于访问ServletContext环境下的资源。
			InputStreamResource
			ByteArrayResource
		ResourceLoader接口，用于获取Resource，所有的ApplicationContext都实现了该接口。
		