一、代码组成
	1.总览
		├── pages					页面根目录，该目录下包含了小程序的所有页面
		|	├── pageName				页面目录，该目录下包含了页面所需要的js交互代码、布局代码以及样式代码
		|	|	├── pageName.js
		|	|	├── pageName.wxml
		|	|	└── pageName.wxss		页面样式
		|	├── ...
		|	└── ...
		|
		├── utils
		|	└── utils.js
		|
		├── app.js
		├── app.json
		├── app.wxss				项目公共样式
		└── project.config.json
		
	2.JSON配置
	3.WXML模板
		是一套小程序框架设计的标签语言
		<标签名 属性1="属性值1" 属性2="属性值2" ...>......</标签名>
		1).数据绑定
			WXML中可以绑定来自逻辑层的数据，以双大括号的形式来表明这个符号来自逻辑层：
				<text>{{val}}</text>
			属性也可以使用逻辑层数据：
				<text attr="{{val}}">hello world</text>
		2).逻辑语法
			* 三元运算
				{{ condition ? exp1 : exp2 }}
				需要注意的是这里的condition、exp1和exp2都是Javascript中的语法。比如若是字符串需要加上双引号
			* 算数运算
				{{ a+b/c }}
			* 条件逻辑
					<view wx:if="<True/Flase>">...</view>
				通过wx:if属性，以决定是否渲染该块。
					<view wx:if="<True/Flase>">...</view>
					<view wx:elif="<True/Flase>">...</view>
					<view wx:else="<True/Flase>">...</view>
				连续块的if-elif-else可以用来选择渲染哪个块
					<block wx:if="...">
						<view></view>
						<view></view>
						<view></view>
					</block>
				用来进行多个块的渲染抉择。
			* 列表渲染					
					<view wx:for="{{array}}">
						{{index}}: {{item}}
					</view>
				上面的array是一个数组，可以使用数组中的数据，重复渲染【该组件】。渲染时index是数组的下标，item是index对应的值。
		3).模板
			可以在模板中定义代码片段，使用name属性标注模板名。模板中也可以使用数据绑定，在使用模板时需要将数据传入模板。
				<template name="<templateName>"></template>
				<template is="<templateName>" data="{{...}}"></template>
		4).引用
			* import
				可以在该文件中使用目标文件的template。
					<import src="xx.wxml" />
					<template is="<templateName>"></template>
				这里的<templateName>来自xx.wxml。
				需要注意的是 import 只会添加目标文件中的template，其他的一切(包括目标文件的import)都不会被引用。也就是不会递归。
			* include
				可以将目标文件中除了 <template/> <wxs/> 外的整个代码引入，相当于是拷贝到 include 位置
	4.WXSS
		1).样式分类
			项目公共样式：根目录下的wxss，会被诸如到小程序的每个页面。
			页面样式：页面文件下的wxss
			其他样式：可以被项目公共样式和页面样式引用
			内联样式：类似于web的内联样式
		2).尺寸单位
			wxss中，以rpx为尺寸单位，用以适配具有不同分辨率的设备。
		3).wxss引用
			@import './xxx.wxss'
			用以引用该wxss文件目录下的xxx.wxss，并且编译期会把xxx.wxss和本文件打包，以至于不会下载多个wxss。
	5.Javascript脚本
二、宿主环境
	1.逻辑层和渲染层
		小程序的wxml和wxss工作在渲染层，js工作在逻辑层。
		1).渲染方案
			逻辑层负责产生、处理数据，并通过Page实例的setData方法传递数据到渲染层。
			Page({
			  onEvent: function () {
				this.setData({ <varBName>: <val> })
			  }
			})
			这里的this就是Page实例。
		2).通信模型
			渲染层和逻辑层分别由2个进程管理，渲染层界面使用了WebView进行渲染，逻辑层采用JsCore进程运行Js脚本。
			逻辑层和渲染层的通信，通过微信客户端Native进行中转，逻辑层的网络请求也藉由Native进行转发。
		3).数据驱动
			视图和变量之间是关联的，以数据驱动的手法将视图和变量进行关联，使得逻辑层修改数据的时候并不需要了解视图布局。
			wxml会先转换成js对象，并将变量带入到js对象中，再渲染出Dom树。当变量修改，wxml对应的js对象被修改，重新渲染Dom树。
	2.程序与页面
		一个小程序由多个页面组成。
		1).App
			宿主环境提供App()构造器用来注册一个程序App，App()构造器必须写在app.js中。
			通过提供事件处理函数以及全局初始化数据，以对小程序实例进行初始化。
			也可以提供其他参数，通过getApp()后可以直接使用。
			App({
				onLaunch:function(options){},
				onShow:function(options){},
				onHide:function(options){},
				onError:function(options){},
				globalData:{
					...
				}
				others:....
			})
		2).App生命周期
			首次打开小程序，微信客户端初始化宿主环境，并从【网络下载】或是【本地缓存】中拿到小程序代码包，再注入到宿主环境。
			小程序初始化以后，会给App实例派发onLaunch事件。
			小程序关闭后，小程序并【没有直接销毁】，而是进入后台运行，会派发App的onHide方法。
			小程序重新打开，会派发App的onShow方法，进入前台。
		3).全局数据
			所有的渲染层都是共享使用逻辑层的，因此在切换页面时，需要确保逻辑层的干净，例如清空定时器等。
		4).页面
			一个页面由界面、逻辑和配置组成。wxml和js文件是必须的。
			一个页面的文件必须在同一个目录下，在app.json的pages字段中对页面路径进行声明，这个是必须的，否则不会再宿主环境中进行注册。
			app.json的pages中的第一项被设置为默认首页。
		5).页面构造器
			Page()在page.js中被调用，用来进行页面实例的初始化工作。
			类似于App实例的初始化，同样传入一些初始数据以及事件回调函数。
			Page({
			  data: { text: "This is page data." },			页面初始数据
			  onLoad: function(options) { },
			  onReady: function() { },
			  onShow: function() { },
			  onHide: function() { },
			  onUnload: function() { },
			  onPullDownRefresh: function() { },
			  onReachBottom: function() { },
			  onShareAppMessage: function () { },
			  onPageScroll: function() { }
			})
		6).Page生命周期
			页面首次加载时，会派发Page的onLoad事件
			页面显示之后，会派发Page的onShow事件，返回该页面时，也会回调该事件。
			页面初次渲染后，会派发Page的onRead事件，触发时，表示Page准备妥当，可以和逻辑层进行交互了。
			页面不可见时，会派发Page的onHide事件，页面切换出去时会触发该事件。
			页面被回收时，会派发Page的onUnload事件，通过wx.redirectTo和wx.nativeBack返回其他页面时将会触发。
		7).Page的Query
			wx.navigateTo({ url: '<path>?k1=v1&k2=v2' })
			通过上述方法可以切换页面，并且传递数据。
			Page({
			  onLoad: function(option) {
					console.log(option.id)
					console.log(option.other)
			  }
			})
		8).页面数据
			wxml绑定的数据位于Page实例的data域，在js中可以通过this.setData来设置data域的数据。
			this.setData({
				k:v
			});
			设置了data域中没有的数据，会将该数据进行添加，若data域中有该关键词数据，则进行数据更新。
			需要注意，this.setData才能保证数据和页面的一致，若直接操作data域则不会进行页面更新。
			不要把data中的任意一项的value设为undefined，否则可能会有引起一些不可预料的bug。
			并且setData会消耗时间，每次设置的数据不应超过1024kB。
		9).页面跳转和路由
			一个小程序有多个页面，可以通过wx.navigateTo来推入一个新的页面，并会形成页面栈。
			wx.navigateBack()，从页面栈中弹出当前页面。
			wx.redirectTo({url:'<path>'})，将页面栈中的当前页面替换。
三、组件
四、API
五、事件
	当小程序发生事件时，通过回调来告知程序员。事件分为两种：【用户在渲染层的行为反馈】以及【组件的状态变化反馈】。
	1.组件事件
		常见的事件有：
			touchstart	手指触摸动作开始
			touchmove	手指触摸后移动
			touchcancel	手指触摸动作被打断，如来电提醒，弹窗
			touchend	手指触摸动作结束
			tap	手指触摸后马上离开
			longpress	手指触摸后，超过350ms再离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发
			longtap	手指触摸后，超过350ms再离开（推荐使用longpress事件代替）
		通过设置属性bind:<event>="callbackFunction"来将组件的对应事件回掉和具体的函数绑定在一起，例如：
			<view bind:tap="tapcallback">view</view>
			Page({
				tapcallback : function(){...}
			})
		当点击view的时候，将会触发tapcallback的执行。需要注意的是，回调函数在Page实例初始化的时候配置。
	2.捕获与绑定
		组件的事件触发分为【向下传递】 以及 【向上传递(冒泡)】。
		--->外----->内
		    层		层
			组		组
		<---件<-----件
		先有外层组件捕获事件，并触发回调，再有内层组件捕获事件，并触发回调。
		然后内存组件冒泡，并触发回调，再有外层组件冒泡，并出发回调。
		capture-bind:<event>，当事件是向下捕获时，回调。
		bind:<event>，当事件是向上冒泡时，回调。
		capture-catch:<event>，当事件是向下捕获时，回调，并且【阻止事件传递】。
六、场景
	1.界面交互反馈
		1).触摸反馈
			<button>标签可以带来触摸反馈
			<button loading="true">...</button> 可以让按钮显示加载状态，以提示用户等待。
		2).Toast和对话框
			Toast用于提示用户操作结果，显示一段时间后自动消失。
				wx.showToast({
					title:"title",
					icon:"success",
					duration:1500		Toast的持续时间，毫秒单位
				})
			Toast不适合用于反馈用户错误通知，因为Toast总会消失，不便于用户接收操作错误的原因。
				wx.showModal({
					title: '标题',
					content: '告知当前状态，信息和解决方法',
					confirmText: '主操作',
					cancelText: '次要操作',
					success: function(res) {		点击对话框操作后的回调
						if (res.confirm) {
							console.log('用户点击主操作')
						} else if (res.cancel) {
							console.log('用户点击次要操作')
						}
					}
				})
	2.https网络通信
		url参数是当前发起请求的服务器接口地址，小程序宿主环境要求request发起的网络请求【必须是https协议请求】。
		同时为了保证小程序不乱用任意域名的服务，wx.request请求的域名需要在小程序管理平台进行配置。
		1).wx.request接口
			wx.request用于发起http请求
				wx.request({
					url: 'https://test.com/getinfo',
					success: function(res) {				网络请求成功后的回调
						console.log(res)// 服务器回包信息
					}
				})
			可以包含的属性值有：
				url:'.....'				url是有长度限制的，其最大长度是1024字节
				method:"GET/POST/PUT/..."
				dataType:"json/text/..."
				success:function(res){}	收到开发者服务成功返回的回调函数
				fail:function(){}		接口调用失败的回调函数
				complete:function(){}	接口调用结束的回调函数（调用成功、失败都会执行）
				data：{...}				请求的参数
		2).收到响应
			小程序端收到回包后会触发success回调，同时回调会带上一个Object信息：
				data开发者服务器返回的数据
				statusCode开发者服务器返回的 HTTP 状态码
				header开发者服务器返回的 HTTP Response Header
	3.微信登录
		1).获取微信登录凭证code
	4.本地数据缓存
		小程序可以将数据保存在设备的硬盘上。
		1).读写本地数据缓存
			* 异步接口
					wx.getStorage({
						key: 'key1',
						success: function(res) {},
						fail: function() {}
					})
				通过异步接口，传入关键词，可以在成功的回调函数中拿到缓存的读取结果：res.data
					wx.setStorage({
						key: 'key1',
						data: 'value',
						success: function() {},
						fail: function() {}
					})
				通过异步接口，传入关键词和值，会回调成功和失败的函数。
			* 同步接口
				为了方便，也提供了同步接口，通过try-catch来捕捉数据读写失败的异常
					try{
						wx.setStorageSync('key', 'value2')		写入缓存
						var v = wx.getStorageSync('key')		读取缓存
					}catch (e) {...}
		2).缓存限制和隔离
			同一个设备，同一个小程序，不同的用户之间的缓存是隔离的。
			同一个设备，同一个用户，不同的小程序之间的缓存是隔离的。
			每个用户的每个小程序的本地缓存空间上限为10MB。若当前缓存达到10MB，写缓存将会失败。
		3).利用本地缓存提前渲染界面
		4).缓存用户登录态SessionId
	5.设备能力